services:
    redis:
        image: redis:7-alpine
        networks: [pulsar-net]
        restart: unless-stopped
        volumes:
            - redis-data:/data
        expose:
            - 6379
        command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
        env_file:
            - .env

    mongo:
        image: mongo:7-jammy
        networks: [pulsar-net]
        restart: unless-stopped
        environment:
            DOCKER: "1"
            MONGO_INITDB_DATABASE: ${MONGO_DB}
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
        volumes:
            - mongo-data:/data/db
        expose:
            - 27017

    node-manager:
        # image: kadirchan/pulsar-prover-node:latest
        # pull_policy: always
        build:
            context: .
            dockerfile: Dockerfile
        networks: [pulsar-net]
        env_file: .env
        environment:
            DOCKER: "1"
            WORKER: settlementWorker
            MINA_PRIVATE_KEY: ${MINA_PRIVATE_KEY}
            MINA_NETWORK: ${MINA_NETWORK}
            FEE: ${FEE}
            CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
            PULSAR_RPC_ADDRESS: ${PULSAR_RPC_ADDRESS}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            MONGO_URI: ${MONGO_URI}
            MONGO_INITDB_DATABASE: ${MONGO_DB}
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
        entrypoint: ["node", "dist/src/nodeManager.js"]
        restart: always
        depends_on:
            redis:
                condition: service_started
            mongo:
                condition: service_started
            mina-local-lightnet:
                condition: service_healthy
        profiles: ["prod"]

    settlement-worker:
        # image: kadirchan/pulsar-prover-node:latest
        # pull_policy: always
        build:
            context: .
            dockerfile: Dockerfile
        networks: [pulsar-net]
        env_file: .env
        environment:
            DOCKER: "1"
            WORKER: settlementWorker
            MINA_PRIVATE_KEY: ${MINA_PRIVATE_KEY}
            MINA_NETWORK: ${MINA_NETWORK}
            FEE: ${FEE}
            CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            MONGO_URI: ${MONGO_URI}
            MONGO_INITDB_DATABASE: ${MONGO_DB}
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
        restart: always
        depends_on:
            redis:
                condition: service_started
            mongo:
                condition: service_started
            mina-local-lightnet:
                condition: service_healthy
        profiles: ["prod"]

    reduce-worker:
        extends: settlement-worker
        environment:
            WORKER: reduceWorker
        profiles: ["prod"]

    merge-worker:
        extends: settlement-worker
        environment:
            WORKER: mergeWorker
        profiles: ["prod"]

    collect-worker:
        extends: settlement-worker
        environment:
            WORKER: collectWorker
        profiles: ["prod"]
    submit-worker:
        extends: settlement-worker
        environment:
            WORKER: submitWorker
        profiles: ["prod"]

    mina-local-lightnet:
        image: o1labs/mina-local-network:compatible-latest-lightnet
        environment:
            NETWORK_TYPE: "single-node"
            PROOF_LEVEL: "none"
            LOG_LEVEL: "Trace"
            RUN_ARCHIVE_NODE: true
            SLOT_TIME: 20000
        networks: [pulsar-net]
        ports:
            - "8080:8080"
        expose:
            # - 8080
            - 8282
            - 3085
            - 5432
            - 8181
        profiles: ["prod"]
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    'curl -fsS -H ''Content-Type: application/json'' -d ''{"query":"{ bestChain(maxLength: 1) { stateHash } }"}'' http://localhost:8080/graphql >/dev/null',
                ]
            interval: 10s
            timeout: 5s
            retries: 30

    mock-contract:
        build:
            context: .
            dockerfile: Dockerfile.mock-contract
        networks: [pulsar-net]
        env_file: .env
        environment:
            DOCKER: "1"
            MINA_NETWORK: ${MINA_NETWORK}
            MINA_PRIVATE_KEY: ${MINA_PRIVATE_KEY}
            CONTRACT_PRIVATE_KEY: ${CONTRACT_PRIVATE_KEY}
        depends_on:
            mina-local-lightnet:
                condition: service_healthy
        profiles: ["mock-pulsar", "full-mock", "prod"]

    loki:
        image: grafana/loki:2.9.0
        ports:
            - "3100:3100"
        command: -config.file=/etc/loki/local-config.yaml
        networks: [pulsar-net]
        volumes:
            - loki-data:/loki
        profiles: ["prod"]

    promtail:
        image: grafana/promtail:2.9.0
        volumes:
            - /var/log:/var/log:ro
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
            - /var/run/docker.sock:/var/run/docker.sock
            - ./config/promtail-config.yml:/etc/promtail/config.yml
        command: -config.file=/etc/promtail/config.yml
        networks: [pulsar-net]
        depends_on:
            - loki
        profiles: ["prod"]

    grafana:
        image: grafana/grafana:10.1.0
        ports:
            - "3000:3000"
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - grafana-data:/var/lib/grafana
            - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
        networks: [pulsar-net]
        depends_on:
            - loki
        profiles: ["prod"]

volumes:
    redis-data:
    mongo-data:
    loki-data:
    grafana-data:

networks:
    pulsar-net:
