// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/bridge/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination.js";
import { Params } from "./params.js";
import { BridgeState, PulsarAction, RewardBalance, WithdrawalBalance } from "./state.js";

export const protobufPackage = "interchain_security.bridge";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

/** QueryTestRequest is request type for the Query/TestQuery RPC method. */
export interface QueryTestRequest {
}

/** QueryTestResponse is response type for the Query/TestQuery RPC method. */
export interface QueryTestResponse {
  /** result holds the test string */
  result: string;
}

export interface QueryWithdrawalBalanceRequest {
  publicKey: string;
}

export interface QueryWithdrawalBalanceResponse {
  amount: string;
}

export interface QueryWithdrawalBalancesRequest {
  pagination?: PageRequest | undefined;
}

export interface QueryWithdrawalBalancesResponse {
  withdrawalBalances: WithdrawalBalance[];
  pagination?: PageResponse | undefined;
}

export interface QueryRewardBalanceRequest {
  publicKey: string;
}

export interface QueryRewardBalanceResponse {
  amount: string;
}

export interface QueryRewardBalancesRequest {
  pagination?: PageRequest | undefined;
}

export interface QueryRewardBalancesResponse {
  rewardBalances: RewardBalance[];
  pagination?: PageResponse | undefined;
}

export interface QueryApprovedActionsRequest {
  pagination?: PageRequest | undefined;
}

export interface QueryApprovedActionsResponse {
  approvedActions: PulsarAction[];
  pagination?: PageResponse | undefined;
}

export interface QueryBridgeStateRequest {
}

export interface QueryBridgeStateResponse {
  bridgeState?: BridgeState | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryTestRequest(): QueryTestRequest {
  return {};
}

export const QueryTestRequest: MessageFns<QueryTestRequest> = {
  encode(_: QueryTestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryTestRequest {
    return {};
  },

  toJSON(_: QueryTestRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTestRequest>, I>>(base?: I): QueryTestRequest {
    return QueryTestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTestRequest>, I>>(_: I): QueryTestRequest {
    const message = createBaseQueryTestRequest();
    return message;
  },
};

function createBaseQueryTestResponse(): QueryTestResponse {
  return { result: "" };
}

export const QueryTestResponse: MessageFns<QueryTestResponse> = {
  encode(message: QueryTestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== "") {
      writer.uint32(10).string(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTestResponse {
    return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
  },

  toJSON(message: QueryTestResponse): unknown {
    const obj: any = {};
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTestResponse>, I>>(base?: I): QueryTestResponse {
    return QueryTestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTestResponse>, I>>(object: I): QueryTestResponse {
    const message = createBaseQueryTestResponse();
    message.result = object.result ?? "";
    return message;
  },
};

function createBaseQueryWithdrawalBalanceRequest(): QueryWithdrawalBalanceRequest {
  return { publicKey: "" };
}

export const QueryWithdrawalBalanceRequest: MessageFns<QueryWithdrawalBalanceRequest> = {
  encode(message: QueryWithdrawalBalanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== "") {
      writer.uint32(10).string(message.publicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWithdrawalBalanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWithdrawalBalanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWithdrawalBalanceRequest {
    return { publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "" };
  },

  toJSON(message: QueryWithdrawalBalanceRequest): unknown {
    const obj: any = {};
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWithdrawalBalanceRequest>, I>>(base?: I): QueryWithdrawalBalanceRequest {
    return QueryWithdrawalBalanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWithdrawalBalanceRequest>, I>>(
    object: I,
  ): QueryWithdrawalBalanceRequest {
    const message = createBaseQueryWithdrawalBalanceRequest();
    message.publicKey = object.publicKey ?? "";
    return message;
  },
};

function createBaseQueryWithdrawalBalanceResponse(): QueryWithdrawalBalanceResponse {
  return { amount: "" };
}

export const QueryWithdrawalBalanceResponse: MessageFns<QueryWithdrawalBalanceResponse> = {
  encode(message: QueryWithdrawalBalanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWithdrawalBalanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWithdrawalBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWithdrawalBalanceResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryWithdrawalBalanceResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWithdrawalBalanceResponse>, I>>(base?: I): QueryWithdrawalBalanceResponse {
    return QueryWithdrawalBalanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWithdrawalBalanceResponse>, I>>(
    object: I,
  ): QueryWithdrawalBalanceResponse {
    const message = createBaseQueryWithdrawalBalanceResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryWithdrawalBalancesRequest(): QueryWithdrawalBalancesRequest {
  return { pagination: undefined };
}

export const QueryWithdrawalBalancesRequest: MessageFns<QueryWithdrawalBalancesRequest> = {
  encode(message: QueryWithdrawalBalancesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWithdrawalBalancesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWithdrawalBalancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWithdrawalBalancesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryWithdrawalBalancesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWithdrawalBalancesRequest>, I>>(base?: I): QueryWithdrawalBalancesRequest {
    return QueryWithdrawalBalancesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWithdrawalBalancesRequest>, I>>(
    object: I,
  ): QueryWithdrawalBalancesRequest {
    const message = createBaseQueryWithdrawalBalancesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryWithdrawalBalancesResponse(): QueryWithdrawalBalancesResponse {
  return { withdrawalBalances: [], pagination: undefined };
}

export const QueryWithdrawalBalancesResponse: MessageFns<QueryWithdrawalBalancesResponse> = {
  encode(message: QueryWithdrawalBalancesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.withdrawalBalances) {
      WithdrawalBalance.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWithdrawalBalancesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWithdrawalBalancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.withdrawalBalances.push(WithdrawalBalance.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWithdrawalBalancesResponse {
    return {
      withdrawalBalances: globalThis.Array.isArray(object?.withdrawalBalances)
        ? object.withdrawalBalances.map((e: any) => WithdrawalBalance.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryWithdrawalBalancesResponse): unknown {
    const obj: any = {};
    if (message.withdrawalBalances?.length) {
      obj.withdrawalBalances = message.withdrawalBalances.map((e) => WithdrawalBalance.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWithdrawalBalancesResponse>, I>>(base?: I): QueryWithdrawalBalancesResponse {
    return QueryWithdrawalBalancesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWithdrawalBalancesResponse>, I>>(
    object: I,
  ): QueryWithdrawalBalancesResponse {
    const message = createBaseQueryWithdrawalBalancesResponse();
    message.withdrawalBalances = object.withdrawalBalances?.map((e) => WithdrawalBalance.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryRewardBalanceRequest(): QueryRewardBalanceRequest {
  return { publicKey: "" };
}

export const QueryRewardBalanceRequest: MessageFns<QueryRewardBalanceRequest> = {
  encode(message: QueryRewardBalanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== "") {
      writer.uint32(10).string(message.publicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardBalanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardBalanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardBalanceRequest {
    return { publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "" };
  },

  toJSON(message: QueryRewardBalanceRequest): unknown {
    const obj: any = {};
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRewardBalanceRequest>, I>>(base?: I): QueryRewardBalanceRequest {
    return QueryRewardBalanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRewardBalanceRequest>, I>>(object: I): QueryRewardBalanceRequest {
    const message = createBaseQueryRewardBalanceRequest();
    message.publicKey = object.publicKey ?? "";
    return message;
  },
};

function createBaseQueryRewardBalanceResponse(): QueryRewardBalanceResponse {
  return { amount: "" };
}

export const QueryRewardBalanceResponse: MessageFns<QueryRewardBalanceResponse> = {
  encode(message: QueryRewardBalanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardBalanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardBalanceResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryRewardBalanceResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRewardBalanceResponse>, I>>(base?: I): QueryRewardBalanceResponse {
    return QueryRewardBalanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRewardBalanceResponse>, I>>(object: I): QueryRewardBalanceResponse {
    const message = createBaseQueryRewardBalanceResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseQueryRewardBalancesRequest(): QueryRewardBalancesRequest {
  return { pagination: undefined };
}

export const QueryRewardBalancesRequest: MessageFns<QueryRewardBalancesRequest> = {
  encode(message: QueryRewardBalancesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardBalancesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardBalancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardBalancesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryRewardBalancesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRewardBalancesRequest>, I>>(base?: I): QueryRewardBalancesRequest {
    return QueryRewardBalancesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRewardBalancesRequest>, I>>(object: I): QueryRewardBalancesRequest {
    const message = createBaseQueryRewardBalancesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryRewardBalancesResponse(): QueryRewardBalancesResponse {
  return { rewardBalances: [], pagination: undefined };
}

export const QueryRewardBalancesResponse: MessageFns<QueryRewardBalancesResponse> = {
  encode(message: QueryRewardBalancesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rewardBalances) {
      RewardBalance.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardBalancesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardBalancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewardBalances.push(RewardBalance.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardBalancesResponse {
    return {
      rewardBalances: globalThis.Array.isArray(object?.rewardBalances)
        ? object.rewardBalances.map((e: any) => RewardBalance.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryRewardBalancesResponse): unknown {
    const obj: any = {};
    if (message.rewardBalances?.length) {
      obj.rewardBalances = message.rewardBalances.map((e) => RewardBalance.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRewardBalancesResponse>, I>>(base?: I): QueryRewardBalancesResponse {
    return QueryRewardBalancesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRewardBalancesResponse>, I>>(object: I): QueryRewardBalancesResponse {
    const message = createBaseQueryRewardBalancesResponse();
    message.rewardBalances = object.rewardBalances?.map((e) => RewardBalance.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryApprovedActionsRequest(): QueryApprovedActionsRequest {
  return { pagination: undefined };
}

export const QueryApprovedActionsRequest: MessageFns<QueryApprovedActionsRequest> = {
  encode(message: QueryApprovedActionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryApprovedActionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryApprovedActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryApprovedActionsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryApprovedActionsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryApprovedActionsRequest>, I>>(base?: I): QueryApprovedActionsRequest {
    return QueryApprovedActionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryApprovedActionsRequest>, I>>(object: I): QueryApprovedActionsRequest {
    const message = createBaseQueryApprovedActionsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryApprovedActionsResponse(): QueryApprovedActionsResponse {
  return { approvedActions: [], pagination: undefined };
}

export const QueryApprovedActionsResponse: MessageFns<QueryApprovedActionsResponse> = {
  encode(message: QueryApprovedActionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.approvedActions) {
      PulsarAction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryApprovedActionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryApprovedActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.approvedActions.push(PulsarAction.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryApprovedActionsResponse {
    return {
      approvedActions: globalThis.Array.isArray(object?.approvedActions)
        ? object.approvedActions.map((e: any) => PulsarAction.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryApprovedActionsResponse): unknown {
    const obj: any = {};
    if (message.approvedActions?.length) {
      obj.approvedActions = message.approvedActions.map((e) => PulsarAction.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryApprovedActionsResponse>, I>>(base?: I): QueryApprovedActionsResponse {
    return QueryApprovedActionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryApprovedActionsResponse>, I>>(object: I): QueryApprovedActionsResponse {
    const message = createBaseQueryApprovedActionsResponse();
    message.approvedActions = object.approvedActions?.map((e) => PulsarAction.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryBridgeStateRequest(): QueryBridgeStateRequest {
  return {};
}

export const QueryBridgeStateRequest: MessageFns<QueryBridgeStateRequest> = {
  encode(_: QueryBridgeStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBridgeStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBridgeStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryBridgeStateRequest {
    return {};
  },

  toJSON(_: QueryBridgeStateRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBridgeStateRequest>, I>>(base?: I): QueryBridgeStateRequest {
    return QueryBridgeStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBridgeStateRequest>, I>>(_: I): QueryBridgeStateRequest {
    const message = createBaseQueryBridgeStateRequest();
    return message;
  },
};

function createBaseQueryBridgeStateResponse(): QueryBridgeStateResponse {
  return { bridgeState: undefined };
}

export const QueryBridgeStateResponse: MessageFns<QueryBridgeStateResponse> = {
  encode(message: QueryBridgeStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bridgeState !== undefined) {
      BridgeState.encode(message.bridgeState, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBridgeStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBridgeStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bridgeState = BridgeState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBridgeStateResponse {
    return { bridgeState: isSet(object.bridgeState) ? BridgeState.fromJSON(object.bridgeState) : undefined };
  },

  toJSON(message: QueryBridgeStateResponse): unknown {
    const obj: any = {};
    if (message.bridgeState !== undefined) {
      obj.bridgeState = BridgeState.toJSON(message.bridgeState);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBridgeStateResponse>, I>>(base?: I): QueryBridgeStateResponse {
    return QueryBridgeStateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBridgeStateResponse>, I>>(object: I): QueryBridgeStateResponse {
    const message = createBaseQueryBridgeStateResponse();
    message.bridgeState = (object.bridgeState !== undefined && object.bridgeState !== null)
      ? BridgeState.fromPartial(object.bridgeState)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export type QueryService = typeof QueryService;
export const QueryService = {
  /** Parameters queries the parameters of the module. */
  params: {
    path: "/interchain_security.bridge.Query/Params",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryParamsRequest) => Buffer.from(QueryParamsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryParamsRequest.decode(value),
    responseSerialize: (value: QueryParamsResponse) => Buffer.from(QueryParamsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryParamsResponse.decode(value),
  },
  /** TestQuery returns a test string "node101" */
  testQuery: {
    path: "/interchain_security.bridge.Query/TestQuery",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryTestRequest) => Buffer.from(QueryTestRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryTestRequest.decode(value),
    responseSerialize: (value: QueryTestResponse) => Buffer.from(QueryTestResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryTestResponse.decode(value),
  },
  /** Queries withdrawal balance by public key. */
  withdrawalBalance: {
    path: "/interchain_security.bridge.Query/WithdrawalBalance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryWithdrawalBalanceRequest) =>
      Buffer.from(QueryWithdrawalBalanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryWithdrawalBalanceRequest.decode(value),
    responseSerialize: (value: QueryWithdrawalBalanceResponse) =>
      Buffer.from(QueryWithdrawalBalanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryWithdrawalBalanceResponse.decode(value),
  },
  /** Queries all withdrawal balances. */
  withdrawalBalances: {
    path: "/interchain_security.bridge.Query/WithdrawalBalances",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryWithdrawalBalancesRequest) =>
      Buffer.from(QueryWithdrawalBalancesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryWithdrawalBalancesRequest.decode(value),
    responseSerialize: (value: QueryWithdrawalBalancesResponse) =>
      Buffer.from(QueryWithdrawalBalancesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryWithdrawalBalancesResponse.decode(value),
  },
  /** Queries reward balance by public key. */
  rewardBalance: {
    path: "/interchain_security.bridge.Query/RewardBalance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryRewardBalanceRequest) =>
      Buffer.from(QueryRewardBalanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryRewardBalanceRequest.decode(value),
    responseSerialize: (value: QueryRewardBalanceResponse) =>
      Buffer.from(QueryRewardBalanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryRewardBalanceResponse.decode(value),
  },
  /** Queries all reward balances. */
  rewardBalances: {
    path: "/interchain_security.bridge.Query/RewardBalances",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryRewardBalancesRequest) =>
      Buffer.from(QueryRewardBalancesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryRewardBalancesRequest.decode(value),
    responseSerialize: (value: QueryRewardBalancesResponse) =>
      Buffer.from(QueryRewardBalancesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryRewardBalancesResponse.decode(value),
  },
  /** Queries approved actions. */
  approvedActions: {
    path: "/interchain_security.bridge.Query/ApprovedActions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryApprovedActionsRequest) =>
      Buffer.from(QueryApprovedActionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryApprovedActionsRequest.decode(value),
    responseSerialize: (value: QueryApprovedActionsResponse) =>
      Buffer.from(QueryApprovedActionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryApprovedActionsResponse.decode(value),
  },
  /** Queries bridge state. */
  bridgeState: {
    path: "/interchain_security.bridge.Query/BridgeState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryBridgeStateRequest) => Buffer.from(QueryBridgeStateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryBridgeStateRequest.decode(value),
    responseSerialize: (value: QueryBridgeStateResponse) =>
      Buffer.from(QueryBridgeStateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryBridgeStateResponse.decode(value),
  },
} as const;

export interface QueryServer extends UntypedServiceImplementation {
  /** Parameters queries the parameters of the module. */
  params: handleUnaryCall<QueryParamsRequest, QueryParamsResponse>;
  /** TestQuery returns a test string "node101" */
  testQuery: handleUnaryCall<QueryTestRequest, QueryTestResponse>;
  /** Queries withdrawal balance by public key. */
  withdrawalBalance: handleUnaryCall<QueryWithdrawalBalanceRequest, QueryWithdrawalBalanceResponse>;
  /** Queries all withdrawal balances. */
  withdrawalBalances: handleUnaryCall<QueryWithdrawalBalancesRequest, QueryWithdrawalBalancesResponse>;
  /** Queries reward balance by public key. */
  rewardBalance: handleUnaryCall<QueryRewardBalanceRequest, QueryRewardBalanceResponse>;
  /** Queries all reward balances. */
  rewardBalances: handleUnaryCall<QueryRewardBalancesRequest, QueryRewardBalancesResponse>;
  /** Queries approved actions. */
  approvedActions: handleUnaryCall<QueryApprovedActionsRequest, QueryApprovedActionsResponse>;
  /** Queries bridge state. */
  bridgeState: handleUnaryCall<QueryBridgeStateRequest, QueryBridgeStateResponse>;
}

export interface QueryClient extends Client {
  /** Parameters queries the parameters of the module. */
  params(
    request: QueryParamsRequest,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  params(
    request: QueryParamsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  params(
    request: QueryParamsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  /** TestQuery returns a test string "node101" */
  testQuery(
    request: QueryTestRequest,
    callback: (error: ServiceError | null, response: QueryTestResponse) => void,
  ): ClientUnaryCall;
  testQuery(
    request: QueryTestRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryTestResponse) => void,
  ): ClientUnaryCall;
  testQuery(
    request: QueryTestRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryTestResponse) => void,
  ): ClientUnaryCall;
  /** Queries withdrawal balance by public key. */
  withdrawalBalance(
    request: QueryWithdrawalBalanceRequest,
    callback: (error: ServiceError | null, response: QueryWithdrawalBalanceResponse) => void,
  ): ClientUnaryCall;
  withdrawalBalance(
    request: QueryWithdrawalBalanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryWithdrawalBalanceResponse) => void,
  ): ClientUnaryCall;
  withdrawalBalance(
    request: QueryWithdrawalBalanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryWithdrawalBalanceResponse) => void,
  ): ClientUnaryCall;
  /** Queries all withdrawal balances. */
  withdrawalBalances(
    request: QueryWithdrawalBalancesRequest,
    callback: (error: ServiceError | null, response: QueryWithdrawalBalancesResponse) => void,
  ): ClientUnaryCall;
  withdrawalBalances(
    request: QueryWithdrawalBalancesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryWithdrawalBalancesResponse) => void,
  ): ClientUnaryCall;
  withdrawalBalances(
    request: QueryWithdrawalBalancesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryWithdrawalBalancesResponse) => void,
  ): ClientUnaryCall;
  /** Queries reward balance by public key. */
  rewardBalance(
    request: QueryRewardBalanceRequest,
    callback: (error: ServiceError | null, response: QueryRewardBalanceResponse) => void,
  ): ClientUnaryCall;
  rewardBalance(
    request: QueryRewardBalanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryRewardBalanceResponse) => void,
  ): ClientUnaryCall;
  rewardBalance(
    request: QueryRewardBalanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryRewardBalanceResponse) => void,
  ): ClientUnaryCall;
  /** Queries all reward balances. */
  rewardBalances(
    request: QueryRewardBalancesRequest,
    callback: (error: ServiceError | null, response: QueryRewardBalancesResponse) => void,
  ): ClientUnaryCall;
  rewardBalances(
    request: QueryRewardBalancesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryRewardBalancesResponse) => void,
  ): ClientUnaryCall;
  rewardBalances(
    request: QueryRewardBalancesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryRewardBalancesResponse) => void,
  ): ClientUnaryCall;
  /** Queries approved actions. */
  approvedActions(
    request: QueryApprovedActionsRequest,
    callback: (error: ServiceError | null, response: QueryApprovedActionsResponse) => void,
  ): ClientUnaryCall;
  approvedActions(
    request: QueryApprovedActionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryApprovedActionsResponse) => void,
  ): ClientUnaryCall;
  approvedActions(
    request: QueryApprovedActionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryApprovedActionsResponse) => void,
  ): ClientUnaryCall;
  /** Queries bridge state. */
  bridgeState(
    request: QueryBridgeStateRequest,
    callback: (error: ServiceError | null, response: QueryBridgeStateResponse) => void,
  ): ClientUnaryCall;
  bridgeState(
    request: QueryBridgeStateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryBridgeStateResponse) => void,
  ): ClientUnaryCall;
  bridgeState(
    request: QueryBridgeStateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryBridgeStateResponse) => void,
  ): ClientUnaryCall;
}

export const QueryClient = makeGenericClientConstructor(
  QueryService,
  "interchain_security.bridge.Query",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QueryClient;
  service: typeof QueryService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
