// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/bridge/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Params } from "./params.js";
import { PulsarAction } from "./state.js";

export const protobufPackage = "interchain_security.bridge";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgLockForWithdrawal {
  creator: string;
  minaPublicKey: string;
  amount: string;
}

export interface MsgLockForWithdrawalResponse {
}

export interface MsgResolveActions {
  creator: string;
  actions: PulsarAction[];
  nextBlockHeight: string;
  merkleWitness: string;
}

export interface MsgResolveActionsResponse {
  processedActionsCount: string;
  approvedActionsCount: string;
  ignoredActionsCount: string;
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgLockForWithdrawal(): MsgLockForWithdrawal {
  return { creator: "", minaPublicKey: "", amount: "" };
}

export const MsgLockForWithdrawal: MessageFns<MsgLockForWithdrawal> = {
  encode(message: MsgLockForWithdrawal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.minaPublicKey !== "") {
      writer.uint32(18).string(message.minaPublicKey);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLockForWithdrawal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLockForWithdrawal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.minaPublicKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLockForWithdrawal {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      minaPublicKey: isSet(object.minaPublicKey) ? globalThis.String(object.minaPublicKey) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: MsgLockForWithdrawal): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.minaPublicKey !== "") {
      obj.minaPublicKey = message.minaPublicKey;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLockForWithdrawal>, I>>(base?: I): MsgLockForWithdrawal {
    return MsgLockForWithdrawal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLockForWithdrawal>, I>>(object: I): MsgLockForWithdrawal {
    const message = createBaseMsgLockForWithdrawal();
    message.creator = object.creator ?? "";
    message.minaPublicKey = object.minaPublicKey ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseMsgLockForWithdrawalResponse(): MsgLockForWithdrawalResponse {
  return {};
}

export const MsgLockForWithdrawalResponse: MessageFns<MsgLockForWithdrawalResponse> = {
  encode(_: MsgLockForWithdrawalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLockForWithdrawalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLockForWithdrawalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgLockForWithdrawalResponse {
    return {};
  },

  toJSON(_: MsgLockForWithdrawalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLockForWithdrawalResponse>, I>>(base?: I): MsgLockForWithdrawalResponse {
    return MsgLockForWithdrawalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLockForWithdrawalResponse>, I>>(_: I): MsgLockForWithdrawalResponse {
    const message = createBaseMsgLockForWithdrawalResponse();
    return message;
  },
};

function createBaseMsgResolveActions(): MsgResolveActions {
  return { creator: "", actions: [], nextBlockHeight: "0", merkleWitness: "" };
}

export const MsgResolveActions: MessageFns<MsgResolveActions> = {
  encode(message: MsgResolveActions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.actions) {
      PulsarAction.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.nextBlockHeight !== "0") {
      writer.uint32(24).uint64(message.nextBlockHeight);
    }
    if (message.merkleWitness !== "") {
      writer.uint32(34).string(message.merkleWitness);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgResolveActions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgResolveActions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actions.push(PulsarAction.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.nextBlockHeight = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.merkleWitness = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgResolveActions {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      actions: globalThis.Array.isArray(object?.actions)
        ? object.actions.map((e: any) => PulsarAction.fromJSON(e))
        : [],
      nextBlockHeight: isSet(object.nextBlockHeight) ? globalThis.String(object.nextBlockHeight) : "0",
      merkleWitness: isSet(object.merkleWitness) ? globalThis.String(object.merkleWitness) : "",
    };
  },

  toJSON(message: MsgResolveActions): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => PulsarAction.toJSON(e));
    }
    if (message.nextBlockHeight !== "0") {
      obj.nextBlockHeight = message.nextBlockHeight;
    }
    if (message.merkleWitness !== "") {
      obj.merkleWitness = message.merkleWitness;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgResolveActions>, I>>(base?: I): MsgResolveActions {
    return MsgResolveActions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgResolveActions>, I>>(object: I): MsgResolveActions {
    const message = createBaseMsgResolveActions();
    message.creator = object.creator ?? "";
    message.actions = object.actions?.map((e) => PulsarAction.fromPartial(e)) || [];
    message.nextBlockHeight = object.nextBlockHeight ?? "0";
    message.merkleWitness = object.merkleWitness ?? "";
    return message;
  },
};

function createBaseMsgResolveActionsResponse(): MsgResolveActionsResponse {
  return { processedActionsCount: "0", approvedActionsCount: "0", ignoredActionsCount: "0" };
}

export const MsgResolveActionsResponse: MessageFns<MsgResolveActionsResponse> = {
  encode(message: MsgResolveActionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.processedActionsCount !== "0") {
      writer.uint32(8).uint64(message.processedActionsCount);
    }
    if (message.approvedActionsCount !== "0") {
      writer.uint32(16).uint64(message.approvedActionsCount);
    }
    if (message.ignoredActionsCount !== "0") {
      writer.uint32(24).uint64(message.ignoredActionsCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgResolveActionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgResolveActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.processedActionsCount = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.approvedActionsCount = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ignoredActionsCount = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgResolveActionsResponse {
    return {
      processedActionsCount: isSet(object.processedActionsCount)
        ? globalThis.String(object.processedActionsCount)
        : "0",
      approvedActionsCount: isSet(object.approvedActionsCount) ? globalThis.String(object.approvedActionsCount) : "0",
      ignoredActionsCount: isSet(object.ignoredActionsCount) ? globalThis.String(object.ignoredActionsCount) : "0",
    };
  },

  toJSON(message: MsgResolveActionsResponse): unknown {
    const obj: any = {};
    if (message.processedActionsCount !== "0") {
      obj.processedActionsCount = message.processedActionsCount;
    }
    if (message.approvedActionsCount !== "0") {
      obj.approvedActionsCount = message.approvedActionsCount;
    }
    if (message.ignoredActionsCount !== "0") {
      obj.ignoredActionsCount = message.ignoredActionsCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgResolveActionsResponse>, I>>(base?: I): MsgResolveActionsResponse {
    return MsgResolveActionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgResolveActionsResponse>, I>>(object: I): MsgResolveActionsResponse {
    const message = createBaseMsgResolveActionsResponse();
    message.processedActionsCount = object.processedActionsCount ?? "0";
    message.approvedActionsCount = object.approvedActionsCount ?? "0";
    message.ignoredActionsCount = object.ignoredActionsCount ?? "0";
    return message;
  },
};

/** Msg defines the Msg service. */
export type MsgService = typeof MsgService;
export const MsgService = {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  updateParams: {
    path: "/interchain_security.bridge.Msg/UpdateParams",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgUpdateParams) => Buffer.from(MsgUpdateParams.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MsgUpdateParams.decode(value),
    responseSerialize: (value: MsgUpdateParamsResponse) => Buffer.from(MsgUpdateParamsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MsgUpdateParamsResponse.decode(value),
  },
  lockForWithdrawal: {
    path: "/interchain_security.bridge.Msg/LockForWithdrawal",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgLockForWithdrawal) => Buffer.from(MsgLockForWithdrawal.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MsgLockForWithdrawal.decode(value),
    responseSerialize: (value: MsgLockForWithdrawalResponse) =>
      Buffer.from(MsgLockForWithdrawalResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MsgLockForWithdrawalResponse.decode(value),
  },
  resolveActions: {
    path: "/interchain_security.bridge.Msg/ResolveActions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgResolveActions) => Buffer.from(MsgResolveActions.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MsgResolveActions.decode(value),
    responseSerialize: (value: MsgResolveActionsResponse) =>
      Buffer.from(MsgResolveActionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MsgResolveActionsResponse.decode(value),
  },
} as const;

export interface MsgServer extends UntypedServiceImplementation {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  updateParams: handleUnaryCall<MsgUpdateParams, MsgUpdateParamsResponse>;
  lockForWithdrawal: handleUnaryCall<MsgLockForWithdrawal, MsgLockForWithdrawalResponse>;
  resolveActions: handleUnaryCall<MsgResolveActions, MsgResolveActionsResponse>;
}

export interface MsgClient extends Client {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  updateParams(
    request: MsgUpdateParams,
    callback: (error: ServiceError | null, response: MsgUpdateParamsResponse) => void,
  ): ClientUnaryCall;
  updateParams(
    request: MsgUpdateParams,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgUpdateParamsResponse) => void,
  ): ClientUnaryCall;
  updateParams(
    request: MsgUpdateParams,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgUpdateParamsResponse) => void,
  ): ClientUnaryCall;
  lockForWithdrawal(
    request: MsgLockForWithdrawal,
    callback: (error: ServiceError | null, response: MsgLockForWithdrawalResponse) => void,
  ): ClientUnaryCall;
  lockForWithdrawal(
    request: MsgLockForWithdrawal,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgLockForWithdrawalResponse) => void,
  ): ClientUnaryCall;
  lockForWithdrawal(
    request: MsgLockForWithdrawal,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgLockForWithdrawalResponse) => void,
  ): ClientUnaryCall;
  resolveActions(
    request: MsgResolveActions,
    callback: (error: ServiceError | null, response: MsgResolveActionsResponse) => void,
  ): ClientUnaryCall;
  resolveActions(
    request: MsgResolveActions,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgResolveActionsResponse) => void,
  ): ClientUnaryCall;
  resolveActions(
    request: MsgResolveActions,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgResolveActionsResponse) => void,
  ): ClientUnaryCall;
}

export const MsgClient = makeGenericClientConstructor(MsgService, "interchain_security.bridge.Msg") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MsgClient;
  service: typeof MsgService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
