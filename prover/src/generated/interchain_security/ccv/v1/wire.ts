// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/ccv/v1/wire.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Infraction, infractionFromJSON, infractionToJSON } from "../../../cosmos/staking/v1beta1/staking.js";
import { Validator, ValidatorUpdate } from "../../../tendermint/abci/types.js";

export const protobufPackage = "interchain_security.ccv.v1";

/** ConsumerPacketType indicates interchain security specific packet types. */
export enum ConsumerPacketDataType {
  /** CONSUMER_PACKET_TYPE_UNSPECIFIED - UNSPECIFIED packet type */
  CONSUMER_PACKET_TYPE_UNSPECIFIED = 0,
  /** CONSUMER_PACKET_TYPE_SLASH - Slash packet */
  CONSUMER_PACKET_TYPE_SLASH = 1,
  /** CONSUMER_PACKET_TYPE_VSCM - VSCMatured packet */
  CONSUMER_PACKET_TYPE_VSCM = 2,
  UNRECOGNIZED = -1,
}

export function consumerPacketDataTypeFromJSON(object: any): ConsumerPacketDataType {
  switch (object) {
    case 0:
    case "CONSUMER_PACKET_TYPE_UNSPECIFIED":
      return ConsumerPacketDataType.CONSUMER_PACKET_TYPE_UNSPECIFIED;
    case 1:
    case "CONSUMER_PACKET_TYPE_SLASH":
      return ConsumerPacketDataType.CONSUMER_PACKET_TYPE_SLASH;
    case 2:
    case "CONSUMER_PACKET_TYPE_VSCM":
      return ConsumerPacketDataType.CONSUMER_PACKET_TYPE_VSCM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConsumerPacketDataType.UNRECOGNIZED;
  }
}

export function consumerPacketDataTypeToJSON(object: ConsumerPacketDataType): string {
  switch (object) {
    case ConsumerPacketDataType.CONSUMER_PACKET_TYPE_UNSPECIFIED:
      return "CONSUMER_PACKET_TYPE_UNSPECIFIED";
    case ConsumerPacketDataType.CONSUMER_PACKET_TYPE_SLASH:
      return "CONSUMER_PACKET_TYPE_SLASH";
    case ConsumerPacketDataType.CONSUMER_PACKET_TYPE_VSCM:
      return "CONSUMER_PACKET_TYPE_VSCM";
    case ConsumerPacketDataType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * InfractionType indicates the infraction type a validator committed.
 * Note ccv.InfractionType to maintain compatibility between ICS versions
 * using different versions of the cosmos-sdk and ibc-go modules.
 */
export enum InfractionType {
  /** INFRACTION_TYPE_UNSPECIFIED - UNSPECIFIED defines an empty infraction type. */
  INFRACTION_TYPE_UNSPECIFIED = 0,
  /** INFRACTION_TYPE_DOUBLE_SIGN - DOUBLE_SIGN defines a validator that double-signs a block. */
  INFRACTION_TYPE_DOUBLE_SIGN = 1,
  /** INFRACTION_TYPE_DOWNTIME - DOWNTIME defines a validator that missed signing too many blocks. */
  INFRACTION_TYPE_DOWNTIME = 2,
  UNRECOGNIZED = -1,
}

export function infractionTypeFromJSON(object: any): InfractionType {
  switch (object) {
    case 0:
    case "INFRACTION_TYPE_UNSPECIFIED":
      return InfractionType.INFRACTION_TYPE_UNSPECIFIED;
    case 1:
    case "INFRACTION_TYPE_DOUBLE_SIGN":
      return InfractionType.INFRACTION_TYPE_DOUBLE_SIGN;
    case 2:
    case "INFRACTION_TYPE_DOWNTIME":
      return InfractionType.INFRACTION_TYPE_DOWNTIME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InfractionType.UNRECOGNIZED;
  }
}

export function infractionTypeToJSON(object: InfractionType): string {
  switch (object) {
    case InfractionType.INFRACTION_TYPE_UNSPECIFIED:
      return "INFRACTION_TYPE_UNSPECIFIED";
    case InfractionType.INFRACTION_TYPE_DOUBLE_SIGN:
      return "INFRACTION_TYPE_DOUBLE_SIGN";
    case InfractionType.INFRACTION_TYPE_DOWNTIME:
      return "INFRACTION_TYPE_DOWNTIME";
    case InfractionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * This packet is sent from provider chain to consumer chain if the validator
 * set for consumer chain changes (due to new bonding/unbonding messages or
 * slashing events) A VSCMatured packet from consumer chain will be sent
 * asynchronously once unbonding period is over, and this will function as
 * `UnbondingOver` message for this packet.
 */
export interface ValidatorSetChangePacketData {
  validatorUpdates: ValidatorUpdate[];
  valsetUpdateId: string;
  /**
   * consensus address of consumer chain validators
   * successfully slashed on the provider chain
   */
  slashAcks: string[];
}

/**
 * This packet is sent from the consumer chain to the provider chain
 * to notify that a VSC packet reached maturity on the consumer chain.
 */
export interface VSCMaturedPacketData {
  /** the id of the VSC packet that reached maturity */
  valsetUpdateId: string;
}

/**
 * This packet is sent from the consumer chain to the provider chain
 * to request the slashing of a validator as a result of an infraction
 * committed on the consumer chain.
 */
export interface SlashPacketData {
  validator?:
    | Validator
    | undefined;
  /** map to the infraction block height on the provider */
  valsetUpdateId: string;
  /** tell if the slashing is for a downtime or a double-signing infraction */
  infraction: Infraction;
}

/** ConsumerPacketData contains a consumer packet data and a type tag */
export interface ConsumerPacketData {
  type: ConsumerPacketDataType;
  slashPacketData?: SlashPacketData | undefined;
  vscMaturedPacketData?: VSCMaturedPacketData | undefined;
}

/** Note this type is used during IBC handshake methods for both the consumer and provider */
export interface HandshakeMetadata {
  providerFeePoolAddr: string;
  version: string;
}

/**
 * ConsumerPacketData contains a consumer packet data and a type tag
 * that is compatible with ICS v1 and v2 over the wire. It is not used for internal storage.
 */
export interface ConsumerPacketDataV1 {
  type: ConsumerPacketDataType;
  slashPacketData?: SlashPacketDataV1 | undefined;
  vscMaturedPacketData?: VSCMaturedPacketData | undefined;
}

/**
 * This packet is sent from the consumer chain to the provider chain
 * It is backward compatible with the ICS v1 and v2 version of the packet.
 */
export interface SlashPacketDataV1 {
  validator?:
    | Validator
    | undefined;
  /** map to the infraction block height on the provider */
  valsetUpdateId: string;
  /** tell if the slashing is for a downtime or a double-signing infraction */
  infraction: InfractionType;
}

function createBaseValidatorSetChangePacketData(): ValidatorSetChangePacketData {
  return { validatorUpdates: [], valsetUpdateId: "0", slashAcks: [] };
}

export const ValidatorSetChangePacketData: MessageFns<ValidatorSetChangePacketData> = {
  encode(message: ValidatorSetChangePacketData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.validatorUpdates) {
      ValidatorUpdate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.valsetUpdateId !== "0") {
      writer.uint32(16).uint64(message.valsetUpdateId);
    }
    for (const v of message.slashAcks) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidatorSetChangePacketData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorSetChangePacketData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validatorUpdates.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.valsetUpdateId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slashAcks.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorSetChangePacketData {
    return {
      validatorUpdates: globalThis.Array.isArray(object?.validatorUpdates)
        ? object.validatorUpdates.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      valsetUpdateId: isSet(object.valsetUpdateId) ? globalThis.String(object.valsetUpdateId) : "0",
      slashAcks: globalThis.Array.isArray(object?.slashAcks)
        ? object.slashAcks.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ValidatorSetChangePacketData): unknown {
    const obj: any = {};
    if (message.validatorUpdates?.length) {
      obj.validatorUpdates = message.validatorUpdates.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.valsetUpdateId !== "0") {
      obj.valsetUpdateId = message.valsetUpdateId;
    }
    if (message.slashAcks?.length) {
      obj.slashAcks = message.slashAcks;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorSetChangePacketData>, I>>(base?: I): ValidatorSetChangePacketData {
    return ValidatorSetChangePacketData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorSetChangePacketData>, I>>(object: I): ValidatorSetChangePacketData {
    const message = createBaseValidatorSetChangePacketData();
    message.validatorUpdates = object.validatorUpdates?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.valsetUpdateId = object.valsetUpdateId ?? "0";
    message.slashAcks = object.slashAcks?.map((e) => e) || [];
    return message;
  },
};

function createBaseVSCMaturedPacketData(): VSCMaturedPacketData {
  return { valsetUpdateId: "0" };
}

export const VSCMaturedPacketData: MessageFns<VSCMaturedPacketData> = {
  encode(message: VSCMaturedPacketData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valsetUpdateId !== "0") {
      writer.uint32(8).uint64(message.valsetUpdateId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VSCMaturedPacketData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVSCMaturedPacketData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valsetUpdateId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VSCMaturedPacketData {
    return { valsetUpdateId: isSet(object.valsetUpdateId) ? globalThis.String(object.valsetUpdateId) : "0" };
  },

  toJSON(message: VSCMaturedPacketData): unknown {
    const obj: any = {};
    if (message.valsetUpdateId !== "0") {
      obj.valsetUpdateId = message.valsetUpdateId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VSCMaturedPacketData>, I>>(base?: I): VSCMaturedPacketData {
    return VSCMaturedPacketData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VSCMaturedPacketData>, I>>(object: I): VSCMaturedPacketData {
    const message = createBaseVSCMaturedPacketData();
    message.valsetUpdateId = object.valsetUpdateId ?? "0";
    return message;
  },
};

function createBaseSlashPacketData(): SlashPacketData {
  return { validator: undefined, valsetUpdateId: "0", infraction: 0 };
}

export const SlashPacketData: MessageFns<SlashPacketData> = {
  encode(message: SlashPacketData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(10).fork()).join();
    }
    if (message.valsetUpdateId !== "0") {
      writer.uint32(16).uint64(message.valsetUpdateId);
    }
    if (message.infraction !== 0) {
      writer.uint32(24).int32(message.infraction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlashPacketData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlashPacketData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.valsetUpdateId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.infraction = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlashPacketData {
    return {
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      valsetUpdateId: isSet(object.valsetUpdateId) ? globalThis.String(object.valsetUpdateId) : "0",
      infraction: isSet(object.infraction) ? infractionFromJSON(object.infraction) : 0,
    };
  },

  toJSON(message: SlashPacketData): unknown {
    const obj: any = {};
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.valsetUpdateId !== "0") {
      obj.valsetUpdateId = message.valsetUpdateId;
    }
    if (message.infraction !== 0) {
      obj.infraction = infractionToJSON(message.infraction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SlashPacketData>, I>>(base?: I): SlashPacketData {
    return SlashPacketData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SlashPacketData>, I>>(object: I): SlashPacketData {
    const message = createBaseSlashPacketData();
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.valsetUpdateId = object.valsetUpdateId ?? "0";
    message.infraction = object.infraction ?? 0;
    return message;
  },
};

function createBaseConsumerPacketData(): ConsumerPacketData {
  return { type: 0, slashPacketData: undefined, vscMaturedPacketData: undefined };
}

export const ConsumerPacketData: MessageFns<ConsumerPacketData> = {
  encode(message: ConsumerPacketData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.slashPacketData !== undefined) {
      SlashPacketData.encode(message.slashPacketData, writer.uint32(18).fork()).join();
    }
    if (message.vscMaturedPacketData !== undefined) {
      VSCMaturedPacketData.encode(message.vscMaturedPacketData, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsumerPacketData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsumerPacketData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slashPacketData = SlashPacketData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.vscMaturedPacketData = VSCMaturedPacketData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsumerPacketData {
    return {
      type: isSet(object.type) ? consumerPacketDataTypeFromJSON(object.type) : 0,
      slashPacketData: isSet(object.slashPacketData) ? SlashPacketData.fromJSON(object.slashPacketData) : undefined,
      vscMaturedPacketData: isSet(object.vscMaturedPacketData)
        ? VSCMaturedPacketData.fromJSON(object.vscMaturedPacketData)
        : undefined,
    };
  },

  toJSON(message: ConsumerPacketData): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = consumerPacketDataTypeToJSON(message.type);
    }
    if (message.slashPacketData !== undefined) {
      obj.slashPacketData = SlashPacketData.toJSON(message.slashPacketData);
    }
    if (message.vscMaturedPacketData !== undefined) {
      obj.vscMaturedPacketData = VSCMaturedPacketData.toJSON(message.vscMaturedPacketData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsumerPacketData>, I>>(base?: I): ConsumerPacketData {
    return ConsumerPacketData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsumerPacketData>, I>>(object: I): ConsumerPacketData {
    const message = createBaseConsumerPacketData();
    message.type = object.type ?? 0;
    message.slashPacketData = (object.slashPacketData !== undefined && object.slashPacketData !== null)
      ? SlashPacketData.fromPartial(object.slashPacketData)
      : undefined;
    message.vscMaturedPacketData = (object.vscMaturedPacketData !== undefined && object.vscMaturedPacketData !== null)
      ? VSCMaturedPacketData.fromPartial(object.vscMaturedPacketData)
      : undefined;
    return message;
  },
};

function createBaseHandshakeMetadata(): HandshakeMetadata {
  return { providerFeePoolAddr: "", version: "" };
}

export const HandshakeMetadata: MessageFns<HandshakeMetadata> = {
  encode(message: HandshakeMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.providerFeePoolAddr !== "") {
      writer.uint32(10).string(message.providerFeePoolAddr);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandshakeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandshakeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.providerFeePoolAddr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandshakeMetadata {
    return {
      providerFeePoolAddr: isSet(object.providerFeePoolAddr) ? globalThis.String(object.providerFeePoolAddr) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: HandshakeMetadata): unknown {
    const obj: any = {};
    if (message.providerFeePoolAddr !== "") {
      obj.providerFeePoolAddr = message.providerFeePoolAddr;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandshakeMetadata>, I>>(base?: I): HandshakeMetadata {
    return HandshakeMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandshakeMetadata>, I>>(object: I): HandshakeMetadata {
    const message = createBaseHandshakeMetadata();
    message.providerFeePoolAddr = object.providerFeePoolAddr ?? "";
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseConsumerPacketDataV1(): ConsumerPacketDataV1 {
  return { type: 0, slashPacketData: undefined, vscMaturedPacketData: undefined };
}

export const ConsumerPacketDataV1: MessageFns<ConsumerPacketDataV1> = {
  encode(message: ConsumerPacketDataV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.slashPacketData !== undefined) {
      SlashPacketDataV1.encode(message.slashPacketData, writer.uint32(18).fork()).join();
    }
    if (message.vscMaturedPacketData !== undefined) {
      VSCMaturedPacketData.encode(message.vscMaturedPacketData, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsumerPacketDataV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsumerPacketDataV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slashPacketData = SlashPacketDataV1.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.vscMaturedPacketData = VSCMaturedPacketData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsumerPacketDataV1 {
    return {
      type: isSet(object.type) ? consumerPacketDataTypeFromJSON(object.type) : 0,
      slashPacketData: isSet(object.slashPacketData) ? SlashPacketDataV1.fromJSON(object.slashPacketData) : undefined,
      vscMaturedPacketData: isSet(object.vscMaturedPacketData)
        ? VSCMaturedPacketData.fromJSON(object.vscMaturedPacketData)
        : undefined,
    };
  },

  toJSON(message: ConsumerPacketDataV1): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = consumerPacketDataTypeToJSON(message.type);
    }
    if (message.slashPacketData !== undefined) {
      obj.slashPacketData = SlashPacketDataV1.toJSON(message.slashPacketData);
    }
    if (message.vscMaturedPacketData !== undefined) {
      obj.vscMaturedPacketData = VSCMaturedPacketData.toJSON(message.vscMaturedPacketData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsumerPacketDataV1>, I>>(base?: I): ConsumerPacketDataV1 {
    return ConsumerPacketDataV1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsumerPacketDataV1>, I>>(object: I): ConsumerPacketDataV1 {
    const message = createBaseConsumerPacketDataV1();
    message.type = object.type ?? 0;
    message.slashPacketData = (object.slashPacketData !== undefined && object.slashPacketData !== null)
      ? SlashPacketDataV1.fromPartial(object.slashPacketData)
      : undefined;
    message.vscMaturedPacketData = (object.vscMaturedPacketData !== undefined && object.vscMaturedPacketData !== null)
      ? VSCMaturedPacketData.fromPartial(object.vscMaturedPacketData)
      : undefined;
    return message;
  },
};

function createBaseSlashPacketDataV1(): SlashPacketDataV1 {
  return { validator: undefined, valsetUpdateId: "0", infraction: 0 };
}

export const SlashPacketDataV1: MessageFns<SlashPacketDataV1> = {
  encode(message: SlashPacketDataV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(10).fork()).join();
    }
    if (message.valsetUpdateId !== "0") {
      writer.uint32(16).uint64(message.valsetUpdateId);
    }
    if (message.infraction !== 0) {
      writer.uint32(24).int32(message.infraction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlashPacketDataV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlashPacketDataV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.valsetUpdateId = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.infraction = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlashPacketDataV1 {
    return {
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      valsetUpdateId: isSet(object.valsetUpdateId) ? globalThis.String(object.valsetUpdateId) : "0",
      infraction: isSet(object.infraction) ? infractionTypeFromJSON(object.infraction) : 0,
    };
  },

  toJSON(message: SlashPacketDataV1): unknown {
    const obj: any = {};
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.valsetUpdateId !== "0") {
      obj.valsetUpdateId = message.valsetUpdateId;
    }
    if (message.infraction !== 0) {
      obj.infraction = infractionTypeToJSON(message.infraction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SlashPacketDataV1>, I>>(base?: I): SlashPacketDataV1 {
    return SlashPacketDataV1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SlashPacketDataV1>, I>>(object: I): SlashPacketDataV1 {
    const message = createBaseSlashPacketDataV1();
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.valsetUpdateId = object.valsetUpdateId ?? "0";
    message.infraction = object.infraction ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
