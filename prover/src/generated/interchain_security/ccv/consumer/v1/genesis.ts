// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/ccv/consumer/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { ClientState, ConsensusState } from "../../../../ibc/lightclients/tendermint/v1/tendermint";
import { ValidatorUpdate } from "../../../../tendermint/abci/types";
import { ConsumerParams, ProviderInfo } from "../../v1/shared_consumer";
import { ConsumerPacketData } from "../../v1/wire";

export const protobufPackage = "interchain_security.ccv.consumer.v1";

/**
 * GenesisState defines the CCV consumer genesis state
 *
 * Note: this type is only used on consumer side and references shared types with
 * provider
 */
export interface GenesisState {
  /** ConsumerParams is a shared type with provider module */
  params?:
    | ConsumerParams
    | undefined;
  /** Client ID of the provider. Empty for a new chain, filled in on restart. */
  providerClientId: string;
  /** Channel ID of the provider. Empty for a new chain, filled in on restart. */
  providerChannelId: string;
  /** true for new chain, false for chain restart. */
  newChain: boolean;
  /**
   * !!! DEPRECATED !!! ProviderClientState is deprecated. Use provider.client_state instead
   *
   * @deprecated
   */
  providerClientState?:
    | ClientState
    | undefined;
  /**
   * !!! DEPRECATED !!! ProviderConsensusState is deprecated. Use provider.consensus_state instead
   *
   * @deprecated
   */
  providerConsensusState?:
    | ConsensusState
    | undefined;
  /** MaturingPackets nil on new chain, filled in on restart. */
  maturingPackets: MaturingVSCPacket[];
  /**
   * !!! DEPRECATED !!!! InitialValset is deprecated. Use provider.initial_val_set instead
   *
   * @deprecated
   */
  initialValSet: ValidatorUpdate[];
  /** HeightToValsetUpdateId nil on new chain, filled in on restart. */
  heightToValsetUpdateId: HeightToValsetUpdateID[];
  /** OutstandingDowntimes nil on new chain, filled  in on restart. */
  outstandingDowntimeSlashing: OutstandingDowntime[];
  /** PendingConsumerPackets nil on new chain, filled in on restart. */
  pendingConsumerPackets?:
    | ConsumerPacketDataList
    | undefined;
  /** LastTransmissionBlockHeight nil on new chain, filled in on restart. */
  lastTransmissionBlockHeight?:
    | LastTransmissionBlockHeight
    | undefined;
  /** flag indicating whether the consumer CCV module starts in pre-CCV state */
  preCCV: boolean;
  provider?: ProviderInfo | undefined;
}

/**
 * HeightValsetUpdateID represents a mapping internal to the consumer CCV module
 * which links a block height to each recv valset update id.
 */
export interface HeightToValsetUpdateID {
  height: string;
  valsetUpdateId: string;
}

/**
 * OutstandingDowntime defines the type used internally to the consumer CCV
 * module and is used in order to not send multiple slashing requests for
 * the same downtime infraction.
 */
export interface OutstandingDowntime {
  validatorConsensusAddress: string;
}

/**
 * LastTransmissionBlockHeight is the last time validator holding
 * pools were transmitted to the provider chain. This type is used internally
 * to the consumer CCV module.
 */
export interface LastTransmissionBlockHeight {
  height: string;
}

/**
 * MaturingVSCPacket represents a vsc packet that is maturing internal to the
 * consumer CCV module, where the consumer has not yet relayed a VSCMatured
 * packet back to the provider.
 */
export interface MaturingVSCPacket {
  vscId: string;
  maturityTime?: Date | undefined;
}

/**
 * ConsumerPacketDataList is a list of consumer packet data packets.
 *
 * Note this type is used internally to the consumer CCV module
 * for exporting / importing state in InitGenesis and ExportGenesis.
 */
export interface ConsumerPacketDataList {
  list: ConsumerPacketData[];
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    providerClientId: "",
    providerChannelId: "",
    newChain: false,
    providerClientState: undefined,
    providerConsensusState: undefined,
    maturingPackets: [],
    initialValSet: [],
    heightToValsetUpdateId: [],
    outstandingDowntimeSlashing: [],
    pendingConsumerPackets: undefined,
    lastTransmissionBlockHeight: undefined,
    preCCV: false,
    provider: undefined,
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      ConsumerParams.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.providerClientId !== "") {
      writer.uint32(18).string(message.providerClientId);
    }
    if (message.providerChannelId !== "") {
      writer.uint32(26).string(message.providerChannelId);
    }
    if (message.newChain !== false) {
      writer.uint32(32).bool(message.newChain);
    }
    if (message.providerClientState !== undefined) {
      ClientState.encode(message.providerClientState, writer.uint32(42).fork()).join();
    }
    if (message.providerConsensusState !== undefined) {
      ConsensusState.encode(message.providerConsensusState, writer.uint32(50).fork()).join();
    }
    for (const v of message.maturingPackets) {
      MaturingVSCPacket.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.initialValSet) {
      ValidatorUpdate.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.heightToValsetUpdateId) {
      HeightToValsetUpdateID.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.outstandingDowntimeSlashing) {
      OutstandingDowntime.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.pendingConsumerPackets !== undefined) {
      ConsumerPacketDataList.encode(message.pendingConsumerPackets, writer.uint32(90).fork()).join();
    }
    if (message.lastTransmissionBlockHeight !== undefined) {
      LastTransmissionBlockHeight.encode(message.lastTransmissionBlockHeight, writer.uint32(98).fork()).join();
    }
    if (message.preCCV !== false) {
      writer.uint32(104).bool(message.preCCV);
    }
    if (message.provider !== undefined) {
      ProviderInfo.encode(message.provider, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = ConsumerParams.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.providerClientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.providerChannelId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.newChain = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.providerClientState = ClientState.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.providerConsensusState = ConsensusState.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.maturingPackets.push(MaturingVSCPacket.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.initialValSet.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.heightToValsetUpdateId.push(HeightToValsetUpdateID.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.outstandingDowntimeSlashing.push(OutstandingDowntime.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.pendingConsumerPackets = ConsumerPacketDataList.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.lastTransmissionBlockHeight = LastTransmissionBlockHeight.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.preCCV = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.provider = ProviderInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? ConsumerParams.fromJSON(object.params) : undefined,
      providerClientId: isSet(object.providerClientId) ? globalThis.String(object.providerClientId) : "",
      providerChannelId: isSet(object.providerChannelId) ? globalThis.String(object.providerChannelId) : "",
      newChain: isSet(object.newChain) ? globalThis.Boolean(object.newChain) : false,
      providerClientState: isSet(object.providerClientState)
        ? ClientState.fromJSON(object.providerClientState)
        : undefined,
      providerConsensusState: isSet(object.providerConsensusState)
        ? ConsensusState.fromJSON(object.providerConsensusState)
        : undefined,
      maturingPackets: globalThis.Array.isArray(object?.maturingPackets)
        ? object.maturingPackets.map((e: any) => MaturingVSCPacket.fromJSON(e))
        : [],
      initialValSet: globalThis.Array.isArray(object?.initialValSet)
        ? object.initialValSet.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      heightToValsetUpdateId: globalThis.Array.isArray(object?.heightToValsetUpdateId)
        ? object.heightToValsetUpdateId.map((e: any) => HeightToValsetUpdateID.fromJSON(e))
        : [],
      outstandingDowntimeSlashing: globalThis.Array.isArray(object?.outstandingDowntimeSlashing)
        ? object.outstandingDowntimeSlashing.map((e: any) => OutstandingDowntime.fromJSON(e))
        : [],
      pendingConsumerPackets: isSet(object.pendingConsumerPackets)
        ? ConsumerPacketDataList.fromJSON(object.pendingConsumerPackets)
        : undefined,
      lastTransmissionBlockHeight: isSet(object.lastTransmissionBlockHeight)
        ? LastTransmissionBlockHeight.fromJSON(object.lastTransmissionBlockHeight)
        : undefined,
      preCCV: isSet(object.preCCV) ? globalThis.Boolean(object.preCCV) : false,
      provider: isSet(object.provider) ? ProviderInfo.fromJSON(object.provider) : undefined,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = ConsumerParams.toJSON(message.params);
    }
    if (message.providerClientId !== "") {
      obj.providerClientId = message.providerClientId;
    }
    if (message.providerChannelId !== "") {
      obj.providerChannelId = message.providerChannelId;
    }
    if (message.newChain !== false) {
      obj.newChain = message.newChain;
    }
    if (message.providerClientState !== undefined) {
      obj.providerClientState = ClientState.toJSON(message.providerClientState);
    }
    if (message.providerConsensusState !== undefined) {
      obj.providerConsensusState = ConsensusState.toJSON(message.providerConsensusState);
    }
    if (message.maturingPackets?.length) {
      obj.maturingPackets = message.maturingPackets.map((e) => MaturingVSCPacket.toJSON(e));
    }
    if (message.initialValSet?.length) {
      obj.initialValSet = message.initialValSet.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.heightToValsetUpdateId?.length) {
      obj.heightToValsetUpdateId = message.heightToValsetUpdateId.map((e) => HeightToValsetUpdateID.toJSON(e));
    }
    if (message.outstandingDowntimeSlashing?.length) {
      obj.outstandingDowntimeSlashing = message.outstandingDowntimeSlashing.map((e) => OutstandingDowntime.toJSON(e));
    }
    if (message.pendingConsumerPackets !== undefined) {
      obj.pendingConsumerPackets = ConsumerPacketDataList.toJSON(message.pendingConsumerPackets);
    }
    if (message.lastTransmissionBlockHeight !== undefined) {
      obj.lastTransmissionBlockHeight = LastTransmissionBlockHeight.toJSON(message.lastTransmissionBlockHeight);
    }
    if (message.preCCV !== false) {
      obj.preCCV = message.preCCV;
    }
    if (message.provider !== undefined) {
      obj.provider = ProviderInfo.toJSON(message.provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? ConsumerParams.fromPartial(object.params)
      : undefined;
    message.providerClientId = object.providerClientId ?? "";
    message.providerChannelId = object.providerChannelId ?? "";
    message.newChain = object.newChain ?? false;
    message.providerClientState = (object.providerClientState !== undefined && object.providerClientState !== null)
      ? ClientState.fromPartial(object.providerClientState)
      : undefined;
    message.providerConsensusState =
      (object.providerConsensusState !== undefined && object.providerConsensusState !== null)
        ? ConsensusState.fromPartial(object.providerConsensusState)
        : undefined;
    message.maturingPackets = object.maturingPackets?.map((e) => MaturingVSCPacket.fromPartial(e)) || [];
    message.initialValSet = object.initialValSet?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.heightToValsetUpdateId = object.heightToValsetUpdateId?.map((e) => HeightToValsetUpdateID.fromPartial(e)) ||
      [];
    message.outstandingDowntimeSlashing =
      object.outstandingDowntimeSlashing?.map((e) => OutstandingDowntime.fromPartial(e)) || [];
    message.pendingConsumerPackets =
      (object.pendingConsumerPackets !== undefined && object.pendingConsumerPackets !== null)
        ? ConsumerPacketDataList.fromPartial(object.pendingConsumerPackets)
        : undefined;
    message.lastTransmissionBlockHeight =
      (object.lastTransmissionBlockHeight !== undefined && object.lastTransmissionBlockHeight !== null)
        ? LastTransmissionBlockHeight.fromPartial(object.lastTransmissionBlockHeight)
        : undefined;
    message.preCCV = object.preCCV ?? false;
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? ProviderInfo.fromPartial(object.provider)
      : undefined;
    return message;
  },
};

function createBaseHeightToValsetUpdateID(): HeightToValsetUpdateID {
  return { height: "0", valsetUpdateId: "0" };
}

export const HeightToValsetUpdateID: MessageFns<HeightToValsetUpdateID> = {
  encode(message: HeightToValsetUpdateID, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.height !== "0") {
      writer.uint32(8).uint64(message.height);
    }
    if (message.valsetUpdateId !== "0") {
      writer.uint32(16).uint64(message.valsetUpdateId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeightToValsetUpdateID {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeightToValsetUpdateID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.valsetUpdateId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeightToValsetUpdateID {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      valsetUpdateId: isSet(object.valsetUpdateId) ? globalThis.String(object.valsetUpdateId) : "0",
    };
  },

  toJSON(message: HeightToValsetUpdateID): unknown {
    const obj: any = {};
    if (message.height !== "0") {
      obj.height = message.height;
    }
    if (message.valsetUpdateId !== "0") {
      obj.valsetUpdateId = message.valsetUpdateId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeightToValsetUpdateID>, I>>(base?: I): HeightToValsetUpdateID {
    return HeightToValsetUpdateID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeightToValsetUpdateID>, I>>(object: I): HeightToValsetUpdateID {
    const message = createBaseHeightToValsetUpdateID();
    message.height = object.height ?? "0";
    message.valsetUpdateId = object.valsetUpdateId ?? "0";
    return message;
  },
};

function createBaseOutstandingDowntime(): OutstandingDowntime {
  return { validatorConsensusAddress: "" };
}

export const OutstandingDowntime: MessageFns<OutstandingDowntime> = {
  encode(message: OutstandingDowntime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validatorConsensusAddress !== "") {
      writer.uint32(10).string(message.validatorConsensusAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutstandingDowntime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutstandingDowntime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validatorConsensusAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutstandingDowntime {
    return {
      validatorConsensusAddress: isSet(object.validatorConsensusAddress)
        ? globalThis.String(object.validatorConsensusAddress)
        : "",
    };
  },

  toJSON(message: OutstandingDowntime): unknown {
    const obj: any = {};
    if (message.validatorConsensusAddress !== "") {
      obj.validatorConsensusAddress = message.validatorConsensusAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutstandingDowntime>, I>>(base?: I): OutstandingDowntime {
    return OutstandingDowntime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutstandingDowntime>, I>>(object: I): OutstandingDowntime {
    const message = createBaseOutstandingDowntime();
    message.validatorConsensusAddress = object.validatorConsensusAddress ?? "";
    return message;
  },
};

function createBaseLastTransmissionBlockHeight(): LastTransmissionBlockHeight {
  return { height: "0" };
}

export const LastTransmissionBlockHeight: MessageFns<LastTransmissionBlockHeight> = {
  encode(message: LastTransmissionBlockHeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.height !== "0") {
      writer.uint32(8).int64(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LastTransmissionBlockHeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLastTransmissionBlockHeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LastTransmissionBlockHeight {
    return { height: isSet(object.height) ? globalThis.String(object.height) : "0" };
  },

  toJSON(message: LastTransmissionBlockHeight): unknown {
    const obj: any = {};
    if (message.height !== "0") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LastTransmissionBlockHeight>, I>>(base?: I): LastTransmissionBlockHeight {
    return LastTransmissionBlockHeight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LastTransmissionBlockHeight>, I>>(object: I): LastTransmissionBlockHeight {
    const message = createBaseLastTransmissionBlockHeight();
    message.height = object.height ?? "0";
    return message;
  },
};

function createBaseMaturingVSCPacket(): MaturingVSCPacket {
  return { vscId: "0", maturityTime: undefined };
}

export const MaturingVSCPacket: MessageFns<MaturingVSCPacket> = {
  encode(message: MaturingVSCPacket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vscId !== "0") {
      writer.uint32(8).uint64(message.vscId);
    }
    if (message.maturityTime !== undefined) {
      Timestamp.encode(toTimestamp(message.maturityTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaturingVSCPacket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaturingVSCPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.vscId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maturityTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaturingVSCPacket {
    return {
      vscId: isSet(object.vscId) ? globalThis.String(object.vscId) : "0",
      maturityTime: isSet(object.maturityTime) ? fromJsonTimestamp(object.maturityTime) : undefined,
    };
  },

  toJSON(message: MaturingVSCPacket): unknown {
    const obj: any = {};
    if (message.vscId !== "0") {
      obj.vscId = message.vscId;
    }
    if (message.maturityTime !== undefined) {
      obj.maturityTime = message.maturityTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MaturingVSCPacket>, I>>(base?: I): MaturingVSCPacket {
    return MaturingVSCPacket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MaturingVSCPacket>, I>>(object: I): MaturingVSCPacket {
    const message = createBaseMaturingVSCPacket();
    message.vscId = object.vscId ?? "0";
    message.maturityTime = object.maturityTime ?? undefined;
    return message;
  },
};

function createBaseConsumerPacketDataList(): ConsumerPacketDataList {
  return { list: [] };
}

export const ConsumerPacketDataList: MessageFns<ConsumerPacketDataList> = {
  encode(message: ConsumerPacketDataList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.list) {
      ConsumerPacketData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsumerPacketDataList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsumerPacketDataList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.list.push(ConsumerPacketData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsumerPacketDataList {
    return {
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => ConsumerPacketData.fromJSON(e)) : [],
    };
  },

  toJSON(message: ConsumerPacketDataList): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list.map((e) => ConsumerPacketData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsumerPacketDataList>, I>>(base?: I): ConsumerPacketDataList {
    return ConsumerPacketDataList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsumerPacketDataList>, I>>(object: I): ConsumerPacketDataList {
    const message = createBaseConsumerPacketDataList();
    message.list = object.list?.map((e) => ConsumerPacketData.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
