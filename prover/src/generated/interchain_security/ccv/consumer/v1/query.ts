// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/ccv/consumer/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { ConsumerParams } from "../../v1/shared_consumer.js";
import { ConsumerPacketData } from "../../v1/wire.js";
import { SlashRecord } from "./consumer.js";

export const protobufPackage = "interchain_security.ccv.consumer.v1";

/** NextFeeDistributionEstimate holds information about next fee distribution */
export interface NextFeeDistributionEstimate {
  /** current block height at the time of querying */
  currentHeight: string;
  /** block height at which last distribution took place */
  lastHeight: string;
  /** block height at which next distribution will take place */
  nextHeight: string;
  /** ratio between consumer and provider fee distribution */
  distributionFraction: string;
  /** total accruead fees at the time of querying */
  total: string;
  /** amount distributed to provider chain */
  toProvider: string;
  /** amount distributed (kept) by consumer chain */
  toConsumer: string;
}

export interface QueryNextFeeDistributionEstimateRequest {
}

export interface QueryNextFeeDistributionEstimateResponse {
  data?: NextFeeDistributionEstimate | undefined;
}

export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: ConsumerParams | undefined;
}

export interface QueryProviderInfoRequest {
}

export interface QueryProviderInfoResponse {
  consumer?: ChainInfo | undefined;
  provider?: ChainInfo | undefined;
}

export interface QueryThrottleStateRequest {
}

export interface QueryThrottleStateResponse {
  slashRecord?: SlashRecord | undefined;
  packetDataQueue: ConsumerPacketData[];
}

export interface ChainInfo {
  chainID: string;
  clientID: string;
  connectionID: string;
  channelID: string;
}

function createBaseNextFeeDistributionEstimate(): NextFeeDistributionEstimate {
  return {
    currentHeight: "0",
    lastHeight: "0",
    nextHeight: "0",
    distributionFraction: "",
    total: "",
    toProvider: "",
    toConsumer: "",
  };
}

export const NextFeeDistributionEstimate: MessageFns<NextFeeDistributionEstimate> = {
  encode(message: NextFeeDistributionEstimate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentHeight !== "0") {
      writer.uint32(8).int64(message.currentHeight);
    }
    if (message.lastHeight !== "0") {
      writer.uint32(16).int64(message.lastHeight);
    }
    if (message.nextHeight !== "0") {
      writer.uint32(24).int64(message.nextHeight);
    }
    if (message.distributionFraction !== "") {
      writer.uint32(34).string(message.distributionFraction);
    }
    if (message.total !== "") {
      writer.uint32(42).string(message.total);
    }
    if (message.toProvider !== "") {
      writer.uint32(50).string(message.toProvider);
    }
    if (message.toConsumer !== "") {
      writer.uint32(58).string(message.toConsumer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NextFeeDistributionEstimate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNextFeeDistributionEstimate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.currentHeight = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastHeight = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.nextHeight = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.distributionFraction = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.total = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.toProvider = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.toConsumer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NextFeeDistributionEstimate {
    return {
      currentHeight: isSet(object.currentHeight) ? globalThis.String(object.currentHeight) : "0",
      lastHeight: isSet(object.lastHeight) ? globalThis.String(object.lastHeight) : "0",
      nextHeight: isSet(object.nextHeight) ? globalThis.String(object.nextHeight) : "0",
      distributionFraction: isSet(object.distributionFraction) ? globalThis.String(object.distributionFraction) : "",
      total: isSet(object.total) ? globalThis.String(object.total) : "",
      toProvider: isSet(object.toProvider) ? globalThis.String(object.toProvider) : "",
      toConsumer: isSet(object.toConsumer) ? globalThis.String(object.toConsumer) : "",
    };
  },

  toJSON(message: NextFeeDistributionEstimate): unknown {
    const obj: any = {};
    if (message.currentHeight !== "0") {
      obj.currentHeight = message.currentHeight;
    }
    if (message.lastHeight !== "0") {
      obj.lastHeight = message.lastHeight;
    }
    if (message.nextHeight !== "0") {
      obj.nextHeight = message.nextHeight;
    }
    if (message.distributionFraction !== "") {
      obj.distributionFraction = message.distributionFraction;
    }
    if (message.total !== "") {
      obj.total = message.total;
    }
    if (message.toProvider !== "") {
      obj.toProvider = message.toProvider;
    }
    if (message.toConsumer !== "") {
      obj.toConsumer = message.toConsumer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NextFeeDistributionEstimate>, I>>(base?: I): NextFeeDistributionEstimate {
    return NextFeeDistributionEstimate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NextFeeDistributionEstimate>, I>>(object: I): NextFeeDistributionEstimate {
    const message = createBaseNextFeeDistributionEstimate();
    message.currentHeight = object.currentHeight ?? "0";
    message.lastHeight = object.lastHeight ?? "0";
    message.nextHeight = object.nextHeight ?? "0";
    message.distributionFraction = object.distributionFraction ?? "";
    message.total = object.total ?? "";
    message.toProvider = object.toProvider ?? "";
    message.toConsumer = object.toConsumer ?? "";
    return message;
  },
};

function createBaseQueryNextFeeDistributionEstimateRequest(): QueryNextFeeDistributionEstimateRequest {
  return {};
}

export const QueryNextFeeDistributionEstimateRequest: MessageFns<QueryNextFeeDistributionEstimateRequest> = {
  encode(_: QueryNextFeeDistributionEstimateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNextFeeDistributionEstimateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNextFeeDistributionEstimateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryNextFeeDistributionEstimateRequest {
    return {};
  },

  toJSON(_: QueryNextFeeDistributionEstimateRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryNextFeeDistributionEstimateRequest>, I>>(
    base?: I,
  ): QueryNextFeeDistributionEstimateRequest {
    return QueryNextFeeDistributionEstimateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryNextFeeDistributionEstimateRequest>, I>>(
    _: I,
  ): QueryNextFeeDistributionEstimateRequest {
    const message = createBaseQueryNextFeeDistributionEstimateRequest();
    return message;
  },
};

function createBaseQueryNextFeeDistributionEstimateResponse(): QueryNextFeeDistributionEstimateResponse {
  return { data: undefined };
}

export const QueryNextFeeDistributionEstimateResponse: MessageFns<QueryNextFeeDistributionEstimateResponse> = {
  encode(message: QueryNextFeeDistributionEstimateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      NextFeeDistributionEstimate.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNextFeeDistributionEstimateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNextFeeDistributionEstimateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = NextFeeDistributionEstimate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNextFeeDistributionEstimateResponse {
    return { data: isSet(object.data) ? NextFeeDistributionEstimate.fromJSON(object.data) : undefined };
  },

  toJSON(message: QueryNextFeeDistributionEstimateResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = NextFeeDistributionEstimate.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryNextFeeDistributionEstimateResponse>, I>>(
    base?: I,
  ): QueryNextFeeDistributionEstimateResponse {
    return QueryNextFeeDistributionEstimateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryNextFeeDistributionEstimateResponse>, I>>(
    object: I,
  ): QueryNextFeeDistributionEstimateResponse {
    const message = createBaseQueryNextFeeDistributionEstimateResponse();
    message.data = (object.data !== undefined && object.data !== null)
      ? NextFeeDistributionEstimate.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      ConsumerParams.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = ConsumerParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? ConsumerParams.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = ConsumerParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? ConsumerParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryProviderInfoRequest(): QueryProviderInfoRequest {
  return {};
}

export const QueryProviderInfoRequest: MessageFns<QueryProviderInfoRequest> = {
  encode(_: QueryProviderInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryProviderInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryProviderInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryProviderInfoRequest {
    return {};
  },

  toJSON(_: QueryProviderInfoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryProviderInfoRequest>, I>>(base?: I): QueryProviderInfoRequest {
    return QueryProviderInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryProviderInfoRequest>, I>>(_: I): QueryProviderInfoRequest {
    const message = createBaseQueryProviderInfoRequest();
    return message;
  },
};

function createBaseQueryProviderInfoResponse(): QueryProviderInfoResponse {
  return { consumer: undefined, provider: undefined };
}

export const QueryProviderInfoResponse: MessageFns<QueryProviderInfoResponse> = {
  encode(message: QueryProviderInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumer !== undefined) {
      ChainInfo.encode(message.consumer, writer.uint32(10).fork()).join();
    }
    if (message.provider !== undefined) {
      ChainInfo.encode(message.provider, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryProviderInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryProviderInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumer = ChainInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.provider = ChainInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryProviderInfoResponse {
    return {
      consumer: isSet(object.consumer) ? ChainInfo.fromJSON(object.consumer) : undefined,
      provider: isSet(object.provider) ? ChainInfo.fromJSON(object.provider) : undefined,
    };
  },

  toJSON(message: QueryProviderInfoResponse): unknown {
    const obj: any = {};
    if (message.consumer !== undefined) {
      obj.consumer = ChainInfo.toJSON(message.consumer);
    }
    if (message.provider !== undefined) {
      obj.provider = ChainInfo.toJSON(message.provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryProviderInfoResponse>, I>>(base?: I): QueryProviderInfoResponse {
    return QueryProviderInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryProviderInfoResponse>, I>>(object: I): QueryProviderInfoResponse {
    const message = createBaseQueryProviderInfoResponse();
    message.consumer = (object.consumer !== undefined && object.consumer !== null)
      ? ChainInfo.fromPartial(object.consumer)
      : undefined;
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? ChainInfo.fromPartial(object.provider)
      : undefined;
    return message;
  },
};

function createBaseQueryThrottleStateRequest(): QueryThrottleStateRequest {
  return {};
}

export const QueryThrottleStateRequest: MessageFns<QueryThrottleStateRequest> = {
  encode(_: QueryThrottleStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryThrottleStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryThrottleStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryThrottleStateRequest {
    return {};
  },

  toJSON(_: QueryThrottleStateRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryThrottleStateRequest>, I>>(base?: I): QueryThrottleStateRequest {
    return QueryThrottleStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryThrottleStateRequest>, I>>(_: I): QueryThrottleStateRequest {
    const message = createBaseQueryThrottleStateRequest();
    return message;
  },
};

function createBaseQueryThrottleStateResponse(): QueryThrottleStateResponse {
  return { slashRecord: undefined, packetDataQueue: [] };
}

export const QueryThrottleStateResponse: MessageFns<QueryThrottleStateResponse> = {
  encode(message: QueryThrottleStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slashRecord !== undefined) {
      SlashRecord.encode(message.slashRecord, writer.uint32(10).fork()).join();
    }
    for (const v of message.packetDataQueue) {
      ConsumerPacketData.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryThrottleStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryThrottleStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.slashRecord = SlashRecord.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.packetDataQueue.push(ConsumerPacketData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryThrottleStateResponse {
    return {
      slashRecord: isSet(object.slashRecord) ? SlashRecord.fromJSON(object.slashRecord) : undefined,
      packetDataQueue: globalThis.Array.isArray(object?.packetDataQueue)
        ? object.packetDataQueue.map((e: any) => ConsumerPacketData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryThrottleStateResponse): unknown {
    const obj: any = {};
    if (message.slashRecord !== undefined) {
      obj.slashRecord = SlashRecord.toJSON(message.slashRecord);
    }
    if (message.packetDataQueue?.length) {
      obj.packetDataQueue = message.packetDataQueue.map((e) => ConsumerPacketData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryThrottleStateResponse>, I>>(base?: I): QueryThrottleStateResponse {
    return QueryThrottleStateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryThrottleStateResponse>, I>>(object: I): QueryThrottleStateResponse {
    const message = createBaseQueryThrottleStateResponse();
    message.slashRecord = (object.slashRecord !== undefined && object.slashRecord !== null)
      ? SlashRecord.fromPartial(object.slashRecord)
      : undefined;
    message.packetDataQueue = object.packetDataQueue?.map((e) => ConsumerPacketData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChainInfo(): ChainInfo {
  return { chainID: "", clientID: "", connectionID: "", channelID: "" };
}

export const ChainInfo: MessageFns<ChainInfo> = {
  encode(message: ChainInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainID !== "") {
      writer.uint32(10).string(message.chainID);
    }
    if (message.clientID !== "") {
      writer.uint32(18).string(message.clientID);
    }
    if (message.connectionID !== "") {
      writer.uint32(26).string(message.connectionID);
    }
    if (message.channelID !== "") {
      writer.uint32(34).string(message.channelID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChainInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chainID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientID = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.connectionID = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.channelID = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChainInfo {
    return {
      chainID: isSet(object.chainID) ? globalThis.String(object.chainID) : "",
      clientID: isSet(object.clientID) ? globalThis.String(object.clientID) : "",
      connectionID: isSet(object.connectionID) ? globalThis.String(object.connectionID) : "",
      channelID: isSet(object.channelID) ? globalThis.String(object.channelID) : "",
    };
  },

  toJSON(message: ChainInfo): unknown {
    const obj: any = {};
    if (message.chainID !== "") {
      obj.chainID = message.chainID;
    }
    if (message.clientID !== "") {
      obj.clientID = message.clientID;
    }
    if (message.connectionID !== "") {
      obj.connectionID = message.connectionID;
    }
    if (message.channelID !== "") {
      obj.channelID = message.channelID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChainInfo>, I>>(base?: I): ChainInfo {
    return ChainInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChainInfo>, I>>(object: I): ChainInfo {
    const message = createBaseChainInfo();
    message.chainID = object.chainID ?? "";
    message.clientID = object.clientID ?? "";
    message.connectionID = object.connectionID ?? "";
    message.channelID = object.channelID ?? "";
    return message;
  },
};

export type QueryService = typeof QueryService;
export const QueryService = {
  /**
   * ConsumerGenesis queries the genesis state needed to start a consumer chain
   * whose proposal has been accepted
   */
  queryNextFeeDistribution: {
    path: "/interchain_security.ccv.consumer.v1.Query/QueryNextFeeDistribution",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryNextFeeDistributionEstimateRequest) =>
      Buffer.from(QueryNextFeeDistributionEstimateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryNextFeeDistributionEstimateRequest.decode(value),
    responseSerialize: (value: QueryNextFeeDistributionEstimateResponse) =>
      Buffer.from(QueryNextFeeDistributionEstimateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryNextFeeDistributionEstimateResponse.decode(value),
  },
  /** QueryParams queries the ccv/consumer module parameters. */
  queryParams: {
    path: "/interchain_security.ccv.consumer.v1.Query/QueryParams",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryParamsRequest) => Buffer.from(QueryParamsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryParamsRequest.decode(value),
    responseSerialize: (value: QueryParamsResponse) => Buffer.from(QueryParamsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryParamsResponse.decode(value),
  },
  queryProviderInfo: {
    path: "/interchain_security.ccv.consumer.v1.Query/QueryProviderInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryProviderInfoRequest) => Buffer.from(QueryProviderInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryProviderInfoRequest.decode(value),
    responseSerialize: (value: QueryProviderInfoResponse) =>
      Buffer.from(QueryProviderInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryProviderInfoResponse.decode(value),
  },
  /** QueryThrottleState returns on-chain state relevant to throttled consumer packets */
  queryThrottleState: {
    path: "/interchain_security.ccv.consumer.v1.Query/QueryThrottleState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryThrottleStateRequest) =>
      Buffer.from(QueryThrottleStateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryThrottleStateRequest.decode(value),
    responseSerialize: (value: QueryThrottleStateResponse) =>
      Buffer.from(QueryThrottleStateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryThrottleStateResponse.decode(value),
  },
} as const;

export interface QueryServer extends UntypedServiceImplementation {
  /**
   * ConsumerGenesis queries the genesis state needed to start a consumer chain
   * whose proposal has been accepted
   */
  queryNextFeeDistribution: handleUnaryCall<
    QueryNextFeeDistributionEstimateRequest,
    QueryNextFeeDistributionEstimateResponse
  >;
  /** QueryParams queries the ccv/consumer module parameters. */
  queryParams: handleUnaryCall<QueryParamsRequest, QueryParamsResponse>;
  queryProviderInfo: handleUnaryCall<QueryProviderInfoRequest, QueryProviderInfoResponse>;
  /** QueryThrottleState returns on-chain state relevant to throttled consumer packets */
  queryThrottleState: handleUnaryCall<QueryThrottleStateRequest, QueryThrottleStateResponse>;
}

export interface QueryClient extends Client {
  /**
   * ConsumerGenesis queries the genesis state needed to start a consumer chain
   * whose proposal has been accepted
   */
  queryNextFeeDistribution(
    request: QueryNextFeeDistributionEstimateRequest,
    callback: (error: ServiceError | null, response: QueryNextFeeDistributionEstimateResponse) => void,
  ): ClientUnaryCall;
  queryNextFeeDistribution(
    request: QueryNextFeeDistributionEstimateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryNextFeeDistributionEstimateResponse) => void,
  ): ClientUnaryCall;
  queryNextFeeDistribution(
    request: QueryNextFeeDistributionEstimateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryNextFeeDistributionEstimateResponse) => void,
  ): ClientUnaryCall;
  /** QueryParams queries the ccv/consumer module parameters. */
  queryParams(
    request: QueryParamsRequest,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  queryParams(
    request: QueryParamsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  queryParams(
    request: QueryParamsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  queryProviderInfo(
    request: QueryProviderInfoRequest,
    callback: (error: ServiceError | null, response: QueryProviderInfoResponse) => void,
  ): ClientUnaryCall;
  queryProviderInfo(
    request: QueryProviderInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryProviderInfoResponse) => void,
  ): ClientUnaryCall;
  queryProviderInfo(
    request: QueryProviderInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryProviderInfoResponse) => void,
  ): ClientUnaryCall;
  /** QueryThrottleState returns on-chain state relevant to throttled consumer packets */
  queryThrottleState(
    request: QueryThrottleStateRequest,
    callback: (error: ServiceError | null, response: QueryThrottleStateResponse) => void,
  ): ClientUnaryCall;
  queryThrottleState(
    request: QueryThrottleStateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryThrottleStateResponse) => void,
  ): ClientUnaryCall;
  queryThrottleState(
    request: QueryThrottleStateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryThrottleStateResponse) => void,
  ): ClientUnaryCall;
}

export const QueryClient = makeGenericClientConstructor(
  QueryService,
  "interchain_security.ccv.consumer.v1.Query",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QueryClient;
  service: typeof QueryService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
