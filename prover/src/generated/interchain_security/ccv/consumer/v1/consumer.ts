// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/ccv/consumer/v1/consumer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../google/protobuf/any.js";
import { Timestamp } from "../../../../google/protobuf/timestamp.js";

export const protobufPackage = "interchain_security.ccv.consumer.v1";

/**
 * CrossChainValidator defines the type used to store validator information
 * internal to the consumer CCV module.  Note one cross chain validator entry is
 * persisted for each consumer validator, where incoming VSC packets update this
 * data, which is eventually forwarded to comet for consumer chain consensus.
 *
 * Note this type is only used internally to the consumer CCV module.
 */
export interface CrossChainValidator {
  address: Buffer;
  power: string;
  /** pubkey is the consensus public key of the validator, as a Protobuf Any. */
  pubkey?:
    | Any
    | undefined;
  /**
   * !!! DEPRECATED !!! opted_out is deprecated because after the introduction of Partial Set Security (PSS)
   * we removed the soft opt-out feature.
   *
   * @deprecated
   */
  optedOut: boolean;
}

/**
 * A record storing the state of a slash packet sent to the provider chain
 * which may bounce back and forth until handled by the provider.
 *
 * Note this type is only used internally to the consumer CCV module.
 */
export interface SlashRecord {
  waitingOnReply: boolean;
  sendTime?: Date | undefined;
}

function createBaseCrossChainValidator(): CrossChainValidator {
  return { address: Buffer.alloc(0), power: "0", pubkey: undefined, optedOut: false };
}

export const CrossChainValidator: MessageFns<CrossChainValidator> = {
  encode(message: CrossChainValidator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.power !== "0") {
      writer.uint32(16).int64(message.power);
    }
    if (message.pubkey !== undefined) {
      Any.encode(message.pubkey, writer.uint32(26).fork()).join();
    }
    if (message.optedOut !== false) {
      writer.uint32(32).bool(message.optedOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrossChainValidator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrossChainValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.power = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pubkey = Any.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.optedOut = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrossChainValidator {
    return {
      address: isSet(object.address) ? Buffer.from(bytesFromBase64(object.address)) : Buffer.alloc(0),
      power: isSet(object.power) ? globalThis.String(object.power) : "0",
      pubkey: isSet(object.pubkey) ? Any.fromJSON(object.pubkey) : undefined,
      optedOut: isSet(object.optedOut) ? globalThis.Boolean(object.optedOut) : false,
    };
  },

  toJSON(message: CrossChainValidator): unknown {
    const obj: any = {};
    if (message.address.length !== 0) {
      obj.address = base64FromBytes(message.address);
    }
    if (message.power !== "0") {
      obj.power = message.power;
    }
    if (message.pubkey !== undefined) {
      obj.pubkey = Any.toJSON(message.pubkey);
    }
    if (message.optedOut !== false) {
      obj.optedOut = message.optedOut;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrossChainValidator>, I>>(base?: I): CrossChainValidator {
    return CrossChainValidator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrossChainValidator>, I>>(object: I): CrossChainValidator {
    const message = createBaseCrossChainValidator();
    message.address = object.address ?? Buffer.alloc(0);
    message.power = object.power ?? "0";
    message.pubkey = (object.pubkey !== undefined && object.pubkey !== null)
      ? Any.fromPartial(object.pubkey)
      : undefined;
    message.optedOut = object.optedOut ?? false;
    return message;
  },
};

function createBaseSlashRecord(): SlashRecord {
  return { waitingOnReply: false, sendTime: undefined };
}

export const SlashRecord: MessageFns<SlashRecord> = {
  encode(message: SlashRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.waitingOnReply !== false) {
      writer.uint32(8).bool(message.waitingOnReply);
    }
    if (message.sendTime !== undefined) {
      Timestamp.encode(toTimestamp(message.sendTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlashRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlashRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.waitingOnReply = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sendTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlashRecord {
    return {
      waitingOnReply: isSet(object.waitingOnReply) ? globalThis.Boolean(object.waitingOnReply) : false,
      sendTime: isSet(object.sendTime) ? fromJsonTimestamp(object.sendTime) : undefined,
    };
  },

  toJSON(message: SlashRecord): unknown {
    const obj: any = {};
    if (message.waitingOnReply !== false) {
      obj.waitingOnReply = message.waitingOnReply;
    }
    if (message.sendTime !== undefined) {
      obj.sendTime = message.sendTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SlashRecord>, I>>(base?: I): SlashRecord {
    return SlashRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SlashRecord>, I>>(object: I): SlashRecord {
    const message = createBaseSlashRecord();
    message.waitingOnReply = object.waitingOnReply ?? false;
    message.sendTime = object.sendTime ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
