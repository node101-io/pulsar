// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/ccv/provider/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ConsumerGenesisState } from "../../v1/shared_consumer";
import { ValidatorSetChangePacketData } from "../../v1/wire";
import {
  ConsumerAdditionProposal,
  ConsumerAddrsToPrune,
  ConsumerRemovalProposal,
  ExportedVscSendTimestamp,
  InitTimeoutTimestamp,
  MaturedUnbondingOps,
  Params,
  UnbondingOp,
  ValidatorByConsumerAddr,
  ValidatorConsumerPubKey,
  VscUnbondingOps,
} from "./provider";

export const protobufPackage = "interchain_security.ccv.provider.v1";

/** GenesisState defines the CCV provider chain genesis state */
export interface GenesisState {
  /** strictly positive and set to 1 (DefaultValsetUpdateID) for a new chain */
  valsetUpdateId: string;
  /** empty for a new chain */
  consumerStates: ConsumerState[];
  /** empty for a new chain */
  unbondingOps: UnbondingOp[];
  /** empty for a new chain */
  matureUnbondingOps?:
    | MaturedUnbondingOps
    | undefined;
  /** empty for a new chain */
  valsetUpdateIdToHeight: ValsetUpdateIdToHeight[];
  /** empty for a new chain */
  consumerAdditionProposals: ConsumerAdditionProposal[];
  /** empty for a new chain */
  consumerRemovalProposals: ConsumerRemovalProposal[];
  params?:
    | Params
    | undefined;
  /** empty for a new chain */
  validatorConsumerPubkeys: ValidatorConsumerPubKey[];
  /** empty for a new chain */
  validatorsByConsumerAddr: ValidatorByConsumerAddr[];
  /** empty for a new chain */
  consumerAddrsToPrune: ConsumerAddrsToPrune[];
  initTimeoutTimestamps: InitTimeoutTimestamp[];
  exportedVscSendTimestamps: ExportedVscSendTimestamp[];
}

/**
 * The provider CCV module's knowledge of consumer state.
 *
 * Note this type is only used internally to the provider CCV module.
 */
export interface ConsumerState {
  /** ChainID defines the chain ID for the consumer chain */
  chainId: string;
  /** ChannelID defines the IBC channel ID for the consumer chain */
  channelId: string;
  /** ClientID defines the IBC client ID for the consumer chain */
  clientId: string;
  /** InitalHeight defines the initial block height for the consumer chain */
  initialHeight: string;
  /** ConsumerGenesis defines the initial consumer chain genesis states */
  consumerGenesis?:
    | ConsumerGenesisState
    | undefined;
  /**
   * PendingValsetChanges defines the pending validator set changes for the
   * consumer chain
   */
  pendingValsetChanges: ValidatorSetChangePacketData[];
  slashDowntimeAck: string[];
  /**
   * UnbondingOpsIndex defines the unbonding operations waiting on this consumer
   * chain
   */
  unbondingOpsIndex: VscUnbondingOps[];
}

/**
 * ValsetUpdateIdToHeight defines the genesis information for the mapping
 * of each valset update id to a block height
 */
export interface ValsetUpdateIdToHeight {
  valsetUpdateId: string;
  height: string;
}

function createBaseGenesisState(): GenesisState {
  return {
    valsetUpdateId: "0",
    consumerStates: [],
    unbondingOps: [],
    matureUnbondingOps: undefined,
    valsetUpdateIdToHeight: [],
    consumerAdditionProposals: [],
    consumerRemovalProposals: [],
    params: undefined,
    validatorConsumerPubkeys: [],
    validatorsByConsumerAddr: [],
    consumerAddrsToPrune: [],
    initTimeoutTimestamps: [],
    exportedVscSendTimestamps: [],
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valsetUpdateId !== "0") {
      writer.uint32(8).uint64(message.valsetUpdateId);
    }
    for (const v of message.consumerStates) {
      ConsumerState.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.unbondingOps) {
      UnbondingOp.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.matureUnbondingOps !== undefined) {
      MaturedUnbondingOps.encode(message.matureUnbondingOps, writer.uint32(34).fork()).join();
    }
    for (const v of message.valsetUpdateIdToHeight) {
      ValsetUpdateIdToHeight.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.consumerAdditionProposals) {
      ConsumerAdditionProposal.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.consumerRemovalProposals) {
      ConsumerRemovalProposal.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(66).fork()).join();
    }
    for (const v of message.validatorConsumerPubkeys) {
      ValidatorConsumerPubKey.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.validatorsByConsumerAddr) {
      ValidatorByConsumerAddr.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.consumerAddrsToPrune) {
      ConsumerAddrsToPrune.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.initTimeoutTimestamps) {
      InitTimeoutTimestamp.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.exportedVscSendTimestamps) {
      ExportedVscSendTimestamp.encode(v!, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valsetUpdateId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consumerStates.push(ConsumerState.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.unbondingOps.push(UnbondingOp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.matureUnbondingOps = MaturedUnbondingOps.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.valsetUpdateIdToHeight.push(ValsetUpdateIdToHeight.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.consumerAdditionProposals.push(ConsumerAdditionProposal.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.consumerRemovalProposals.push(ConsumerRemovalProposal.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.validatorConsumerPubkeys.push(ValidatorConsumerPubKey.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.validatorsByConsumerAddr.push(ValidatorByConsumerAddr.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.consumerAddrsToPrune.push(ConsumerAddrsToPrune.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.initTimeoutTimestamps.push(InitTimeoutTimestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.exportedVscSendTimestamps.push(ExportedVscSendTimestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      valsetUpdateId: isSet(object.valsetUpdateId) ? globalThis.String(object.valsetUpdateId) : "0",
      consumerStates: globalThis.Array.isArray(object?.consumerStates)
        ? object.consumerStates.map((e: any) => ConsumerState.fromJSON(e))
        : [],
      unbondingOps: globalThis.Array.isArray(object?.unbondingOps)
        ? object.unbondingOps.map((e: any) => UnbondingOp.fromJSON(e))
        : [],
      matureUnbondingOps: isSet(object.matureUnbondingOps)
        ? MaturedUnbondingOps.fromJSON(object.matureUnbondingOps)
        : undefined,
      valsetUpdateIdToHeight: globalThis.Array.isArray(object?.valsetUpdateIdToHeight)
        ? object.valsetUpdateIdToHeight.map((e: any) => ValsetUpdateIdToHeight.fromJSON(e))
        : [],
      consumerAdditionProposals: globalThis.Array.isArray(object?.consumerAdditionProposals)
        ? object.consumerAdditionProposals.map((e: any) => ConsumerAdditionProposal.fromJSON(e))
        : [],
      consumerRemovalProposals: globalThis.Array.isArray(object?.consumerRemovalProposals)
        ? object.consumerRemovalProposals.map((e: any) => ConsumerRemovalProposal.fromJSON(e))
        : [],
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      validatorConsumerPubkeys: globalThis.Array.isArray(object?.validatorConsumerPubkeys)
        ? object.validatorConsumerPubkeys.map((e: any) => ValidatorConsumerPubKey.fromJSON(e))
        : [],
      validatorsByConsumerAddr: globalThis.Array.isArray(object?.validatorsByConsumerAddr)
        ? object.validatorsByConsumerAddr.map((e: any) => ValidatorByConsumerAddr.fromJSON(e))
        : [],
      consumerAddrsToPrune: globalThis.Array.isArray(object?.consumerAddrsToPrune)
        ? object.consumerAddrsToPrune.map((e: any) => ConsumerAddrsToPrune.fromJSON(e))
        : [],
      initTimeoutTimestamps: globalThis.Array.isArray(object?.initTimeoutTimestamps)
        ? object.initTimeoutTimestamps.map((e: any) => InitTimeoutTimestamp.fromJSON(e))
        : [],
      exportedVscSendTimestamps: globalThis.Array.isArray(object?.exportedVscSendTimestamps)
        ? object.exportedVscSendTimestamps.map((e: any) => ExportedVscSendTimestamp.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.valsetUpdateId !== "0") {
      obj.valsetUpdateId = message.valsetUpdateId;
    }
    if (message.consumerStates?.length) {
      obj.consumerStates = message.consumerStates.map((e) => ConsumerState.toJSON(e));
    }
    if (message.unbondingOps?.length) {
      obj.unbondingOps = message.unbondingOps.map((e) => UnbondingOp.toJSON(e));
    }
    if (message.matureUnbondingOps !== undefined) {
      obj.matureUnbondingOps = MaturedUnbondingOps.toJSON(message.matureUnbondingOps);
    }
    if (message.valsetUpdateIdToHeight?.length) {
      obj.valsetUpdateIdToHeight = message.valsetUpdateIdToHeight.map((e) => ValsetUpdateIdToHeight.toJSON(e));
    }
    if (message.consumerAdditionProposals?.length) {
      obj.consumerAdditionProposals = message.consumerAdditionProposals.map((e) => ConsumerAdditionProposal.toJSON(e));
    }
    if (message.consumerRemovalProposals?.length) {
      obj.consumerRemovalProposals = message.consumerRemovalProposals.map((e) => ConsumerRemovalProposal.toJSON(e));
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.validatorConsumerPubkeys?.length) {
      obj.validatorConsumerPubkeys = message.validatorConsumerPubkeys.map((e) => ValidatorConsumerPubKey.toJSON(e));
    }
    if (message.validatorsByConsumerAddr?.length) {
      obj.validatorsByConsumerAddr = message.validatorsByConsumerAddr.map((e) => ValidatorByConsumerAddr.toJSON(e));
    }
    if (message.consumerAddrsToPrune?.length) {
      obj.consumerAddrsToPrune = message.consumerAddrsToPrune.map((e) => ConsumerAddrsToPrune.toJSON(e));
    }
    if (message.initTimeoutTimestamps?.length) {
      obj.initTimeoutTimestamps = message.initTimeoutTimestamps.map((e) => InitTimeoutTimestamp.toJSON(e));
    }
    if (message.exportedVscSendTimestamps?.length) {
      obj.exportedVscSendTimestamps = message.exportedVscSendTimestamps.map((e) => ExportedVscSendTimestamp.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.valsetUpdateId = object.valsetUpdateId ?? "0";
    message.consumerStates = object.consumerStates?.map((e) => ConsumerState.fromPartial(e)) || [];
    message.unbondingOps = object.unbondingOps?.map((e) => UnbondingOp.fromPartial(e)) || [];
    message.matureUnbondingOps = (object.matureUnbondingOps !== undefined && object.matureUnbondingOps !== null)
      ? MaturedUnbondingOps.fromPartial(object.matureUnbondingOps)
      : undefined;
    message.valsetUpdateIdToHeight = object.valsetUpdateIdToHeight?.map((e) => ValsetUpdateIdToHeight.fromPartial(e)) ||
      [];
    message.consumerAdditionProposals =
      object.consumerAdditionProposals?.map((e) => ConsumerAdditionProposal.fromPartial(e)) || [];
    message.consumerRemovalProposals =
      object.consumerRemovalProposals?.map((e) => ConsumerRemovalProposal.fromPartial(e)) || [];
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.validatorConsumerPubkeys =
      object.validatorConsumerPubkeys?.map((e) => ValidatorConsumerPubKey.fromPartial(e)) || [];
    message.validatorsByConsumerAddr =
      object.validatorsByConsumerAddr?.map((e) => ValidatorByConsumerAddr.fromPartial(e)) || [];
    message.consumerAddrsToPrune = object.consumerAddrsToPrune?.map((e) => ConsumerAddrsToPrune.fromPartial(e)) || [];
    message.initTimeoutTimestamps = object.initTimeoutTimestamps?.map((e) => InitTimeoutTimestamp.fromPartial(e)) || [];
    message.exportedVscSendTimestamps =
      object.exportedVscSendTimestamps?.map((e) => ExportedVscSendTimestamp.fromPartial(e)) || [];
    return message;
  },
};

function createBaseConsumerState(): ConsumerState {
  return {
    chainId: "",
    channelId: "",
    clientId: "",
    initialHeight: "0",
    consumerGenesis: undefined,
    pendingValsetChanges: [],
    slashDowntimeAck: [],
    unbondingOpsIndex: [],
  };
}

export const ConsumerState: MessageFns<ConsumerState> = {
  encode(message: ConsumerState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    if (message.channelId !== "") {
      writer.uint32(18).string(message.channelId);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.initialHeight !== "0") {
      writer.uint32(32).uint64(message.initialHeight);
    }
    if (message.consumerGenesis !== undefined) {
      ConsumerGenesisState.encode(message.consumerGenesis, writer.uint32(42).fork()).join();
    }
    for (const v of message.pendingValsetChanges) {
      ValidatorSetChangePacketData.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.slashDowntimeAck) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.unbondingOpsIndex) {
      VscUnbondingOps.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsumerState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsumerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.initialHeight = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.consumerGenesis = ConsumerGenesisState.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pendingValsetChanges.push(ValidatorSetChangePacketData.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.slashDowntimeAck.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.unbondingOpsIndex.push(VscUnbondingOps.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsumerState {
    return {
      chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      initialHeight: isSet(object.initialHeight) ? globalThis.String(object.initialHeight) : "0",
      consumerGenesis: isSet(object.consumerGenesis)
        ? ConsumerGenesisState.fromJSON(object.consumerGenesis)
        : undefined,
      pendingValsetChanges: globalThis.Array.isArray(object?.pendingValsetChanges)
        ? object.pendingValsetChanges.map((e: any) => ValidatorSetChangePacketData.fromJSON(e))
        : [],
      slashDowntimeAck: globalThis.Array.isArray(object?.slashDowntimeAck)
        ? object.slashDowntimeAck.map((e: any) => globalThis.String(e))
        : [],
      unbondingOpsIndex: globalThis.Array.isArray(object?.unbondingOpsIndex)
        ? object.unbondingOpsIndex.map((e: any) => VscUnbondingOps.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ConsumerState): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.initialHeight !== "0") {
      obj.initialHeight = message.initialHeight;
    }
    if (message.consumerGenesis !== undefined) {
      obj.consumerGenesis = ConsumerGenesisState.toJSON(message.consumerGenesis);
    }
    if (message.pendingValsetChanges?.length) {
      obj.pendingValsetChanges = message.pendingValsetChanges.map((e) => ValidatorSetChangePacketData.toJSON(e));
    }
    if (message.slashDowntimeAck?.length) {
      obj.slashDowntimeAck = message.slashDowntimeAck;
    }
    if (message.unbondingOpsIndex?.length) {
      obj.unbondingOpsIndex = message.unbondingOpsIndex.map((e) => VscUnbondingOps.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsumerState>, I>>(base?: I): ConsumerState {
    return ConsumerState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsumerState>, I>>(object: I): ConsumerState {
    const message = createBaseConsumerState();
    message.chainId = object.chainId ?? "";
    message.channelId = object.channelId ?? "";
    message.clientId = object.clientId ?? "";
    message.initialHeight = object.initialHeight ?? "0";
    message.consumerGenesis = (object.consumerGenesis !== undefined && object.consumerGenesis !== null)
      ? ConsumerGenesisState.fromPartial(object.consumerGenesis)
      : undefined;
    message.pendingValsetChanges =
      object.pendingValsetChanges?.map((e) => ValidatorSetChangePacketData.fromPartial(e)) || [];
    message.slashDowntimeAck = object.slashDowntimeAck?.map((e) => e) || [];
    message.unbondingOpsIndex = object.unbondingOpsIndex?.map((e) => VscUnbondingOps.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValsetUpdateIdToHeight(): ValsetUpdateIdToHeight {
  return { valsetUpdateId: "0", height: "0" };
}

export const ValsetUpdateIdToHeight: MessageFns<ValsetUpdateIdToHeight> = {
  encode(message: ValsetUpdateIdToHeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valsetUpdateId !== "0") {
      writer.uint32(8).uint64(message.valsetUpdateId);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValsetUpdateIdToHeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValsetUpdateIdToHeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valsetUpdateId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValsetUpdateIdToHeight {
    return {
      valsetUpdateId: isSet(object.valsetUpdateId) ? globalThis.String(object.valsetUpdateId) : "0",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
    };
  },

  toJSON(message: ValsetUpdateIdToHeight): unknown {
    const obj: any = {};
    if (message.valsetUpdateId !== "0") {
      obj.valsetUpdateId = message.valsetUpdateId;
    }
    if (message.height !== "0") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValsetUpdateIdToHeight>, I>>(base?: I): ValsetUpdateIdToHeight {
    return ValsetUpdateIdToHeight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValsetUpdateIdToHeight>, I>>(object: I): ValsetUpdateIdToHeight {
    const message = createBaseValsetUpdateIdToHeight();
    message.valsetUpdateId = object.valsetUpdateId ?? "0";
    message.height = object.height ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
