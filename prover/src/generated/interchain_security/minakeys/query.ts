// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/minakeys/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination.js";
import { KeyStore } from "./key_store.js";
import { Params } from "./params.js";
import { VoteExt } from "./vote_ext.js";

export const protobufPackage = "interchain_security.minakeys";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

export interface QueryGetKeyStoreRequest {
  index: string;
}

export interface QueryGetKeyStoreResponse {
  keyStore?: KeyStore | undefined;
}

export interface QueryAllKeyStoreRequest {
  pagination?: PageRequest | undefined;
}

export interface QueryAllKeyStoreResponse {
  keyStore: KeyStore[];
  pagination?: PageResponse | undefined;
}

export interface QueryGetVoteExtRequest {
  index: string;
}

export interface QueryGetVoteExtResponse {
  voteExt?: VoteExt | undefined;
}

export interface QueryAllVoteExtRequest {
  pagination?: PageRequest | undefined;
}

export interface QueryAllVoteExtResponse {
  voteExt: VoteExt[];
  pagination?: PageResponse | undefined;
}

export interface QueryVoteExtByHeightRequest {
  blockHeight: string;
  pagination?: PageRequest | undefined;
}

export interface QueryVoteExtByHeightResponse {
  voteExt: VoteExt[];
  pagination?: PageResponse | undefined;
}

export interface QueryGetMinaPubkeyRequest {
  validatorAddr: string;
}

export interface QueryGetMinaPubkeyResponse {
  x: string;
  isOdd: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetKeyStoreRequest(): QueryGetKeyStoreRequest {
  return { index: "" };
}

export const QueryGetKeyStoreRequest: MessageFns<QueryGetKeyStoreRequest> = {
  encode(message: QueryGetKeyStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetKeyStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetKeyStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetKeyStoreRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetKeyStoreRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetKeyStoreRequest>, I>>(base?: I): QueryGetKeyStoreRequest {
    return QueryGetKeyStoreRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetKeyStoreRequest>, I>>(object: I): QueryGetKeyStoreRequest {
    const message = createBaseQueryGetKeyStoreRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetKeyStoreResponse(): QueryGetKeyStoreResponse {
  return { keyStore: undefined };
}

export const QueryGetKeyStoreResponse: MessageFns<QueryGetKeyStoreResponse> = {
  encode(message: QueryGetKeyStoreResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyStore !== undefined) {
      KeyStore.encode(message.keyStore, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetKeyStoreResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetKeyStoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyStore = KeyStore.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetKeyStoreResponse {
    return { keyStore: isSet(object.keyStore) ? KeyStore.fromJSON(object.keyStore) : undefined };
  },

  toJSON(message: QueryGetKeyStoreResponse): unknown {
    const obj: any = {};
    if (message.keyStore !== undefined) {
      obj.keyStore = KeyStore.toJSON(message.keyStore);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetKeyStoreResponse>, I>>(base?: I): QueryGetKeyStoreResponse {
    return QueryGetKeyStoreResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetKeyStoreResponse>, I>>(object: I): QueryGetKeyStoreResponse {
    const message = createBaseQueryGetKeyStoreResponse();
    message.keyStore = (object.keyStore !== undefined && object.keyStore !== null)
      ? KeyStore.fromPartial(object.keyStore)
      : undefined;
    return message;
  },
};

function createBaseQueryAllKeyStoreRequest(): QueryAllKeyStoreRequest {
  return { pagination: undefined };
}

export const QueryAllKeyStoreRequest: MessageFns<QueryAllKeyStoreRequest> = {
  encode(message: QueryAllKeyStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllKeyStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllKeyStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllKeyStoreRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllKeyStoreRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllKeyStoreRequest>, I>>(base?: I): QueryAllKeyStoreRequest {
    return QueryAllKeyStoreRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllKeyStoreRequest>, I>>(object: I): QueryAllKeyStoreRequest {
    const message = createBaseQueryAllKeyStoreRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllKeyStoreResponse(): QueryAllKeyStoreResponse {
  return { keyStore: [], pagination: undefined };
}

export const QueryAllKeyStoreResponse: MessageFns<QueryAllKeyStoreResponse> = {
  encode(message: QueryAllKeyStoreResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keyStore) {
      KeyStore.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllKeyStoreResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllKeyStoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyStore.push(KeyStore.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllKeyStoreResponse {
    return {
      keyStore: globalThis.Array.isArray(object?.keyStore) ? object.keyStore.map((e: any) => KeyStore.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllKeyStoreResponse): unknown {
    const obj: any = {};
    if (message.keyStore?.length) {
      obj.keyStore = message.keyStore.map((e) => KeyStore.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllKeyStoreResponse>, I>>(base?: I): QueryAllKeyStoreResponse {
    return QueryAllKeyStoreResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllKeyStoreResponse>, I>>(object: I): QueryAllKeyStoreResponse {
    const message = createBaseQueryAllKeyStoreResponse();
    message.keyStore = object.keyStore?.map((e) => KeyStore.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetVoteExtRequest(): QueryGetVoteExtRequest {
  return { index: "" };
}

export const QueryGetVoteExtRequest: MessageFns<QueryGetVoteExtRequest> = {
  encode(message: QueryGetVoteExtRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVoteExtRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVoteExtRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVoteExtRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetVoteExtRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVoteExtRequest>, I>>(base?: I): QueryGetVoteExtRequest {
    return QueryGetVoteExtRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVoteExtRequest>, I>>(object: I): QueryGetVoteExtRequest {
    const message = createBaseQueryGetVoteExtRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetVoteExtResponse(): QueryGetVoteExtResponse {
  return { voteExt: undefined };
}

export const QueryGetVoteExtResponse: MessageFns<QueryGetVoteExtResponse> = {
  encode(message: QueryGetVoteExtResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.voteExt !== undefined) {
      VoteExt.encode(message.voteExt, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVoteExtResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVoteExtResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.voteExt = VoteExt.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVoteExtResponse {
    return { voteExt: isSet(object.voteExt) ? VoteExt.fromJSON(object.voteExt) : undefined };
  },

  toJSON(message: QueryGetVoteExtResponse): unknown {
    const obj: any = {};
    if (message.voteExt !== undefined) {
      obj.voteExt = VoteExt.toJSON(message.voteExt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVoteExtResponse>, I>>(base?: I): QueryGetVoteExtResponse {
    return QueryGetVoteExtResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVoteExtResponse>, I>>(object: I): QueryGetVoteExtResponse {
    const message = createBaseQueryGetVoteExtResponse();
    message.voteExt = (object.voteExt !== undefined && object.voteExt !== null)
      ? VoteExt.fromPartial(object.voteExt)
      : undefined;
    return message;
  },
};

function createBaseQueryAllVoteExtRequest(): QueryAllVoteExtRequest {
  return { pagination: undefined };
}

export const QueryAllVoteExtRequest: MessageFns<QueryAllVoteExtRequest> = {
  encode(message: QueryAllVoteExtRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllVoteExtRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllVoteExtRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllVoteExtRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllVoteExtRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllVoteExtRequest>, I>>(base?: I): QueryAllVoteExtRequest {
    return QueryAllVoteExtRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllVoteExtRequest>, I>>(object: I): QueryAllVoteExtRequest {
    const message = createBaseQueryAllVoteExtRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllVoteExtResponse(): QueryAllVoteExtResponse {
  return { voteExt: [], pagination: undefined };
}

export const QueryAllVoteExtResponse: MessageFns<QueryAllVoteExtResponse> = {
  encode(message: QueryAllVoteExtResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.voteExt) {
      VoteExt.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllVoteExtResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllVoteExtResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.voteExt.push(VoteExt.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllVoteExtResponse {
    return {
      voteExt: globalThis.Array.isArray(object?.voteExt) ? object.voteExt.map((e: any) => VoteExt.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllVoteExtResponse): unknown {
    const obj: any = {};
    if (message.voteExt?.length) {
      obj.voteExt = message.voteExt.map((e) => VoteExt.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllVoteExtResponse>, I>>(base?: I): QueryAllVoteExtResponse {
    return QueryAllVoteExtResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllVoteExtResponse>, I>>(object: I): QueryAllVoteExtResponse {
    const message = createBaseQueryAllVoteExtResponse();
    message.voteExt = object.voteExt?.map((e) => VoteExt.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryVoteExtByHeightRequest(): QueryVoteExtByHeightRequest {
  return { blockHeight: "0", pagination: undefined };
}

export const QueryVoteExtByHeightRequest: MessageFns<QueryVoteExtByHeightRequest> = {
  encode(message: QueryVoteExtByHeightRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== "0") {
      writer.uint32(8).uint64(message.blockHeight);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryVoteExtByHeightRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVoteExtByHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryVoteExtByHeightRequest {
    return {
      blockHeight: isSet(object.blockHeight) ? globalThis.String(object.blockHeight) : "0",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryVoteExtByHeightRequest): unknown {
    const obj: any = {};
    if (message.blockHeight !== "0") {
      obj.blockHeight = message.blockHeight;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryVoteExtByHeightRequest>, I>>(base?: I): QueryVoteExtByHeightRequest {
    return QueryVoteExtByHeightRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryVoteExtByHeightRequest>, I>>(object: I): QueryVoteExtByHeightRequest {
    const message = createBaseQueryVoteExtByHeightRequest();
    message.blockHeight = object.blockHeight ?? "0";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryVoteExtByHeightResponse(): QueryVoteExtByHeightResponse {
  return { voteExt: [], pagination: undefined };
}

export const QueryVoteExtByHeightResponse: MessageFns<QueryVoteExtByHeightResponse> = {
  encode(message: QueryVoteExtByHeightResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.voteExt) {
      VoteExt.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryVoteExtByHeightResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVoteExtByHeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.voteExt.push(VoteExt.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryVoteExtByHeightResponse {
    return {
      voteExt: globalThis.Array.isArray(object?.voteExt) ? object.voteExt.map((e: any) => VoteExt.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryVoteExtByHeightResponse): unknown {
    const obj: any = {};
    if (message.voteExt?.length) {
      obj.voteExt = message.voteExt.map((e) => VoteExt.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryVoteExtByHeightResponse>, I>>(base?: I): QueryVoteExtByHeightResponse {
    return QueryVoteExtByHeightResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryVoteExtByHeightResponse>, I>>(object: I): QueryVoteExtByHeightResponse {
    const message = createBaseQueryVoteExtByHeightResponse();
    message.voteExt = object.voteExt?.map((e) => VoteExt.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetMinaPubkeyRequest(): QueryGetMinaPubkeyRequest {
  return { validatorAddr: "" };
}

export const QueryGetMinaPubkeyRequest: MessageFns<QueryGetMinaPubkeyRequest> = {
  encode(message: QueryGetMinaPubkeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validatorAddr !== "") {
      writer.uint32(10).string(message.validatorAddr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMinaPubkeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMinaPubkeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validatorAddr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMinaPubkeyRequest {
    return { validatorAddr: isSet(object.validatorAddr) ? globalThis.String(object.validatorAddr) : "" };
  },

  toJSON(message: QueryGetMinaPubkeyRequest): unknown {
    const obj: any = {};
    if (message.validatorAddr !== "") {
      obj.validatorAddr = message.validatorAddr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMinaPubkeyRequest>, I>>(base?: I): QueryGetMinaPubkeyRequest {
    return QueryGetMinaPubkeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMinaPubkeyRequest>, I>>(object: I): QueryGetMinaPubkeyRequest {
    const message = createBaseQueryGetMinaPubkeyRequest();
    message.validatorAddr = object.validatorAddr ?? "";
    return message;
  },
};

function createBaseQueryGetMinaPubkeyResponse(): QueryGetMinaPubkeyResponse {
  return { x: "", isOdd: "" };
}

export const QueryGetMinaPubkeyResponse: MessageFns<QueryGetMinaPubkeyResponse> = {
  encode(message: QueryGetMinaPubkeyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== "") {
      writer.uint32(10).string(message.x);
    }
    if (message.isOdd !== "") {
      writer.uint32(18).string(message.isOdd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMinaPubkeyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMinaPubkeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.x = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.isOdd = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMinaPubkeyResponse {
    return {
      x: isSet(object.x) ? globalThis.String(object.x) : "",
      isOdd: isSet(object.isOdd) ? globalThis.String(object.isOdd) : "",
    };
  },

  toJSON(message: QueryGetMinaPubkeyResponse): unknown {
    const obj: any = {};
    if (message.x !== "") {
      obj.x = message.x;
    }
    if (message.isOdd !== "") {
      obj.isOdd = message.isOdd;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMinaPubkeyResponse>, I>>(base?: I): QueryGetMinaPubkeyResponse {
    return QueryGetMinaPubkeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMinaPubkeyResponse>, I>>(object: I): QueryGetMinaPubkeyResponse {
    const message = createBaseQueryGetMinaPubkeyResponse();
    message.x = object.x ?? "";
    message.isOdd = object.isOdd ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export type QueryService = typeof QueryService;
export const QueryService = {
  /** Parameters queries the parameters of the module. */
  params: {
    path: "/interchain_security.minakeys.Query/Params",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryParamsRequest) => Buffer.from(QueryParamsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryParamsRequest.decode(value),
    responseSerialize: (value: QueryParamsResponse) => Buffer.from(QueryParamsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryParamsResponse.decode(value),
  },
  /** Queries a list of KeyStore items. */
  keyStore: {
    path: "/interchain_security.minakeys.Query/KeyStore",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryGetKeyStoreRequest) => Buffer.from(QueryGetKeyStoreRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryGetKeyStoreRequest.decode(value),
    responseSerialize: (value: QueryGetKeyStoreResponse) =>
      Buffer.from(QueryGetKeyStoreResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryGetKeyStoreResponse.decode(value),
  },
  keyStoreAll: {
    path: "/interchain_security.minakeys.Query/KeyStoreAll",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryAllKeyStoreRequest) => Buffer.from(QueryAllKeyStoreRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryAllKeyStoreRequest.decode(value),
    responseSerialize: (value: QueryAllKeyStoreResponse) =>
      Buffer.from(QueryAllKeyStoreResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryAllKeyStoreResponse.decode(value),
  },
  /** Queries a list of VoteExt items. */
  voteExt: {
    path: "/interchain_security.minakeys.Query/VoteExt",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryGetVoteExtRequest) => Buffer.from(QueryGetVoteExtRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryGetVoteExtRequest.decode(value),
    responseSerialize: (value: QueryGetVoteExtResponse) => Buffer.from(QueryGetVoteExtResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryGetVoteExtResponse.decode(value),
  },
  voteExtAll: {
    path: "/interchain_security.minakeys.Query/VoteExtAll",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryAllVoteExtRequest) => Buffer.from(QueryAllVoteExtRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryAllVoteExtRequest.decode(value),
    responseSerialize: (value: QueryAllVoteExtResponse) => Buffer.from(QueryAllVoteExtResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryAllVoteExtResponse.decode(value),
  },
  /** Queries VoteExt items by height. */
  voteExtByHeight: {
    path: "/interchain_security.minakeys.Query/VoteExtByHeight",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryVoteExtByHeightRequest) =>
      Buffer.from(QueryVoteExtByHeightRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryVoteExtByHeightRequest.decode(value),
    responseSerialize: (value: QueryVoteExtByHeightResponse) =>
      Buffer.from(QueryVoteExtByHeightResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryVoteExtByHeightResponse.decode(value),
  },
  getMinaPubkey: {
    path: "/interchain_security.minakeys.Query/GetMinaPubkey",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryGetMinaPubkeyRequest) =>
      Buffer.from(QueryGetMinaPubkeyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryGetMinaPubkeyRequest.decode(value),
    responseSerialize: (value: QueryGetMinaPubkeyResponse) =>
      Buffer.from(QueryGetMinaPubkeyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryGetMinaPubkeyResponse.decode(value),
  },
} as const;

export interface QueryServer extends UntypedServiceImplementation {
  /** Parameters queries the parameters of the module. */
  params: handleUnaryCall<QueryParamsRequest, QueryParamsResponse>;
  /** Queries a list of KeyStore items. */
  keyStore: handleUnaryCall<QueryGetKeyStoreRequest, QueryGetKeyStoreResponse>;
  keyStoreAll: handleUnaryCall<QueryAllKeyStoreRequest, QueryAllKeyStoreResponse>;
  /** Queries a list of VoteExt items. */
  voteExt: handleUnaryCall<QueryGetVoteExtRequest, QueryGetVoteExtResponse>;
  voteExtAll: handleUnaryCall<QueryAllVoteExtRequest, QueryAllVoteExtResponse>;
  /** Queries VoteExt items by height. */
  voteExtByHeight: handleUnaryCall<QueryVoteExtByHeightRequest, QueryVoteExtByHeightResponse>;
  getMinaPubkey: handleUnaryCall<QueryGetMinaPubkeyRequest, QueryGetMinaPubkeyResponse>;
}

export interface QueryClient extends Client {
  /** Parameters queries the parameters of the module. */
  params(
    request: QueryParamsRequest,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  params(
    request: QueryParamsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  params(
    request: QueryParamsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryParamsResponse) => void,
  ): ClientUnaryCall;
  /** Queries a list of KeyStore items. */
  keyStore(
    request: QueryGetKeyStoreRequest,
    callback: (error: ServiceError | null, response: QueryGetKeyStoreResponse) => void,
  ): ClientUnaryCall;
  keyStore(
    request: QueryGetKeyStoreRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryGetKeyStoreResponse) => void,
  ): ClientUnaryCall;
  keyStore(
    request: QueryGetKeyStoreRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryGetKeyStoreResponse) => void,
  ): ClientUnaryCall;
  keyStoreAll(
    request: QueryAllKeyStoreRequest,
    callback: (error: ServiceError | null, response: QueryAllKeyStoreResponse) => void,
  ): ClientUnaryCall;
  keyStoreAll(
    request: QueryAllKeyStoreRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryAllKeyStoreResponse) => void,
  ): ClientUnaryCall;
  keyStoreAll(
    request: QueryAllKeyStoreRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryAllKeyStoreResponse) => void,
  ): ClientUnaryCall;
  /** Queries a list of VoteExt items. */
  voteExt(
    request: QueryGetVoteExtRequest,
    callback: (error: ServiceError | null, response: QueryGetVoteExtResponse) => void,
  ): ClientUnaryCall;
  voteExt(
    request: QueryGetVoteExtRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryGetVoteExtResponse) => void,
  ): ClientUnaryCall;
  voteExt(
    request: QueryGetVoteExtRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryGetVoteExtResponse) => void,
  ): ClientUnaryCall;
  voteExtAll(
    request: QueryAllVoteExtRequest,
    callback: (error: ServiceError | null, response: QueryAllVoteExtResponse) => void,
  ): ClientUnaryCall;
  voteExtAll(
    request: QueryAllVoteExtRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryAllVoteExtResponse) => void,
  ): ClientUnaryCall;
  voteExtAll(
    request: QueryAllVoteExtRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryAllVoteExtResponse) => void,
  ): ClientUnaryCall;
  /** Queries VoteExt items by height. */
  voteExtByHeight(
    request: QueryVoteExtByHeightRequest,
    callback: (error: ServiceError | null, response: QueryVoteExtByHeightResponse) => void,
  ): ClientUnaryCall;
  voteExtByHeight(
    request: QueryVoteExtByHeightRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryVoteExtByHeightResponse) => void,
  ): ClientUnaryCall;
  voteExtByHeight(
    request: QueryVoteExtByHeightRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryVoteExtByHeightResponse) => void,
  ): ClientUnaryCall;
  getMinaPubkey(
    request: QueryGetMinaPubkeyRequest,
    callback: (error: ServiceError | null, response: QueryGetMinaPubkeyResponse) => void,
  ): ClientUnaryCall;
  getMinaPubkey(
    request: QueryGetMinaPubkeyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryGetMinaPubkeyResponse) => void,
  ): ClientUnaryCall;
  getMinaPubkey(
    request: QueryGetMinaPubkeyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryGetMinaPubkeyResponse) => void,
  ): ClientUnaryCall;
}

export const QueryClient = makeGenericClientConstructor(
  QueryService,
  "interchain_security.minakeys.Query",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QueryClient;
  service: typeof QueryService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
