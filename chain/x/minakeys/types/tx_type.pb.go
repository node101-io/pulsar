// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/minakeys/tx_type.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TxType defines the type of transaction for signature verification
type TxType int32

const (
	// Default Cosmos SDK transaction
	COSMOS_TX TxType = 0
	// Mina wallet transaction
	MINA_TX TxType = 1
)

var TxType_name = map[int32]string{
	0: "COSMOS_TX",
	1: "MINA_TX",
}

var TxType_value = map[string]int32{
	"COSMOS_TX": 0,
	"MINA_TX":   1,
}

func (x TxType) String() string {
	return proto.EnumName(TxType_name, int32(x))
}

func (TxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38ee6263d021063c, []int{0}
}

// TxTypeExtension is used as extension option to specify transaction type
type TxTypeExtension struct {
	TxType TxType `protobuf:"varint,1,opt,name=tx_type,json=txType,proto3,enum=interchain_security.minakeys.TxType" json:"tx_type,omitempty"`
}

func (m *TxTypeExtension) Reset()         { *m = TxTypeExtension{} }
func (m *TxTypeExtension) String() string { return proto.CompactTextString(m) }
func (*TxTypeExtension) ProtoMessage()    {}
func (*TxTypeExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_38ee6263d021063c, []int{0}
}
func (m *TxTypeExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxTypeExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxTypeExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxTypeExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxTypeExtension.Merge(m, src)
}
func (m *TxTypeExtension) XXX_Size() int {
	return m.Size()
}
func (m *TxTypeExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_TxTypeExtension.DiscardUnknown(m)
}

var xxx_messageInfo_TxTypeExtension proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("interchain_security.minakeys.TxType", TxType_name, TxType_value)
	proto.RegisterType((*TxTypeExtension)(nil), "interchain_security.minakeys.TxTypeExtension")
}

func init() {
	proto.RegisterFile("interchain_security/minakeys/tx_type.proto", fileDescriptor_38ee6263d021063c)
}

var fileDescriptor_38ee6263d021063c = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xca, 0xcc, 0x2b, 0x49,
	0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0x2f, 0x4e, 0x4d, 0x2e, 0x2d, 0xca, 0x2c, 0xa9, 0xd4,
	0xcf, 0xcd, 0xcc, 0x4b, 0xcc, 0x4e, 0xad, 0x2c, 0xd6, 0x2f, 0xa9, 0x88, 0x2f, 0xa9, 0x2c, 0x48,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xc1, 0xa2, 0x56, 0x0f, 0xa6, 0x56, 0x4a, 0x24,
	0x3d, 0x3f, 0x3d, 0x1f, 0xac, 0x50, 0x1f, 0xc4, 0x82, 0xe8, 0x91, 0x92, 0x4c, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x07, 0xf3, 0x92, 0x4a, 0xd3, 0xf4, 0x13, 0xf3, 0x2a, 0x21, 0x52, 0x4a, 0x61,
	0x5c, 0xfc, 0x21, 0x15, 0x21, 0x95, 0x05, 0xa9, 0xae, 0x15, 0x25, 0xa9, 0x79, 0xc5, 0x99, 0xf9,
	0x79, 0x42, 0xb6, 0x5c, 0xec, 0x50, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x54, 0xf4,
	0xf0, 0xd9, 0xa9, 0x07, 0xd1, 0x1f, 0xc4, 0x56, 0x02, 0xa6, 0xad, 0x58, 0x3a, 0x16, 0xc8, 0x33,
	0x68, 0x69, 0x71, 0xb1, 0x41, 0xc4, 0x85, 0x78, 0xb9, 0x38, 0x9d, 0xfd, 0x83, 0x7d, 0xfd, 0x83,
	0xe3, 0x43, 0x22, 0x04, 0x18, 0x84, 0xb8, 0xb9, 0xd8, 0x7d, 0x3d, 0xfd, 0x1c, 0x41, 0x1c, 0x46,
	0x29, 0x96, 0x8e, 0xc5, 0x72, 0x0c, 0x4e, 0xbe, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c,
	0xc7, 0x10, 0x65, 0x9c, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x97,
	0x9f, 0x92, 0x6a, 0x68, 0x60, 0xa8, 0x9b, 0x99, 0xaf, 0x5f, 0x50, 0x9a, 0x53, 0x9c, 0x58, 0xa4,
	0x0f, 0x76, 0x90, 0x7e, 0x05, 0x52, 0x48, 0x55, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x7d, 0x66,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xff, 0x83, 0x0b, 0x56, 0x01, 0x00, 0x00,
}

func (m *TxTypeExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxTypeExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxTypeExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxType != 0 {
		i = encodeVarintTxType(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxType(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxType(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxTypeExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxType != 0 {
		n += 1 + sovTxType(uint64(m.TxType))
	}
	return n
}

func sovTxType(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxType(x uint64) (n int) {
	return sovTxType(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxTypeExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxTypeExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxTypeExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= TxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxType(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxType
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxType
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxType
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxType
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxType        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxType          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxType = fmt.Errorf("proto: unexpected end of group")
)
