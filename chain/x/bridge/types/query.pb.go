// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/bridge/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryTestRequest is request type for the Query/TestQuery RPC method.
type QueryTestRequest struct {
}

func (m *QueryTestRequest) Reset()         { *m = QueryTestRequest{} }
func (m *QueryTestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTestRequest) ProtoMessage()    {}
func (*QueryTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{2}
}
func (m *QueryTestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTestRequest.Merge(m, src)
}
func (m *QueryTestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTestRequest proto.InternalMessageInfo

// QueryTestResponse is response type for the Query/TestQuery RPC method.
type QueryTestResponse struct {
	// result holds the test string
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryTestResponse) Reset()         { *m = QueryTestResponse{} }
func (m *QueryTestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTestResponse) ProtoMessage()    {}
func (*QueryTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{3}
}
func (m *QueryTestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTestResponse.Merge(m, src)
}
func (m *QueryTestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTestResponse proto.InternalMessageInfo

func (m *QueryTestResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type QueryWithdrawalBalanceRequest struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *QueryWithdrawalBalanceRequest) Reset()         { *m = QueryWithdrawalBalanceRequest{} }
func (m *QueryWithdrawalBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalBalanceRequest) ProtoMessage()    {}
func (*QueryWithdrawalBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{4}
}
func (m *QueryWithdrawalBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalBalanceRequest.Merge(m, src)
}
func (m *QueryWithdrawalBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalBalanceRequest proto.InternalMessageInfo

func (m *QueryWithdrawalBalanceRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type QueryWithdrawalBalanceResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryWithdrawalBalanceResponse) Reset()         { *m = QueryWithdrawalBalanceResponse{} }
func (m *QueryWithdrawalBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalBalanceResponse) ProtoMessage()    {}
func (*QueryWithdrawalBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{5}
}
func (m *QueryWithdrawalBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalBalanceResponse.Merge(m, src)
}
func (m *QueryWithdrawalBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalBalanceResponse proto.InternalMessageInfo

type QueryWithdrawalBalancesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawalBalancesRequest) Reset()         { *m = QueryWithdrawalBalancesRequest{} }
func (m *QueryWithdrawalBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalBalancesRequest) ProtoMessage()    {}
func (*QueryWithdrawalBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{6}
}
func (m *QueryWithdrawalBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalBalancesRequest.Merge(m, src)
}
func (m *QueryWithdrawalBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalBalancesRequest proto.InternalMessageInfo

func (m *QueryWithdrawalBalancesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryWithdrawalBalancesResponse struct {
	WithdrawalBalances []WithdrawalBalance `protobuf:"bytes,1,rep,name=withdrawal_balances,json=withdrawalBalances,proto3" json:"withdrawal_balances"`
	Pagination         *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawalBalancesResponse) Reset()         { *m = QueryWithdrawalBalancesResponse{} }
func (m *QueryWithdrawalBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalBalancesResponse) ProtoMessage()    {}
func (*QueryWithdrawalBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{7}
}
func (m *QueryWithdrawalBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalBalancesResponse.Merge(m, src)
}
func (m *QueryWithdrawalBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalBalancesResponse proto.InternalMessageInfo

func (m *QueryWithdrawalBalancesResponse) GetWithdrawalBalances() []WithdrawalBalance {
	if m != nil {
		return m.WithdrawalBalances
	}
	return nil
}

func (m *QueryWithdrawalBalancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRewardBalanceRequest struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *QueryRewardBalanceRequest) Reset()         { *m = QueryRewardBalanceRequest{} }
func (m *QueryRewardBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardBalanceRequest) ProtoMessage()    {}
func (*QueryRewardBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{8}
}
func (m *QueryRewardBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardBalanceRequest.Merge(m, src)
}
func (m *QueryRewardBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardBalanceRequest proto.InternalMessageInfo

func (m *QueryRewardBalanceRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type QueryRewardBalanceResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryRewardBalanceResponse) Reset()         { *m = QueryRewardBalanceResponse{} }
func (m *QueryRewardBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardBalanceResponse) ProtoMessage()    {}
func (*QueryRewardBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{9}
}
func (m *QueryRewardBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardBalanceResponse.Merge(m, src)
}
func (m *QueryRewardBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardBalanceResponse proto.InternalMessageInfo

type QueryRewardBalancesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardBalancesRequest) Reset()         { *m = QueryRewardBalancesRequest{} }
func (m *QueryRewardBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardBalancesRequest) ProtoMessage()    {}
func (*QueryRewardBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{10}
}
func (m *QueryRewardBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardBalancesRequest.Merge(m, src)
}
func (m *QueryRewardBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardBalancesRequest proto.InternalMessageInfo

func (m *QueryRewardBalancesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRewardBalancesResponse struct {
	RewardBalances []RewardBalance     `protobuf:"bytes,1,rep,name=reward_balances,json=rewardBalances,proto3" json:"reward_balances"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardBalancesResponse) Reset()         { *m = QueryRewardBalancesResponse{} }
func (m *QueryRewardBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardBalancesResponse) ProtoMessage()    {}
func (*QueryRewardBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{11}
}
func (m *QueryRewardBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardBalancesResponse.Merge(m, src)
}
func (m *QueryRewardBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardBalancesResponse proto.InternalMessageInfo

func (m *QueryRewardBalancesResponse) GetRewardBalances() []RewardBalance {
	if m != nil {
		return m.RewardBalances
	}
	return nil
}

func (m *QueryRewardBalancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryApprovedActionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryApprovedActionsRequest) Reset()         { *m = QueryApprovedActionsRequest{} }
func (m *QueryApprovedActionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryApprovedActionsRequest) ProtoMessage()    {}
func (*QueryApprovedActionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{12}
}
func (m *QueryApprovedActionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryApprovedActionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryApprovedActionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryApprovedActionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryApprovedActionsRequest.Merge(m, src)
}
func (m *QueryApprovedActionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryApprovedActionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryApprovedActionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryApprovedActionsRequest proto.InternalMessageInfo

func (m *QueryApprovedActionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryApprovedActionsResponse struct {
	ApprovedActions []PulsarAction      `protobuf:"bytes,1,rep,name=approved_actions,json=approvedActions,proto3" json:"approved_actions"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryApprovedActionsResponse) Reset()         { *m = QueryApprovedActionsResponse{} }
func (m *QueryApprovedActionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryApprovedActionsResponse) ProtoMessage()    {}
func (*QueryApprovedActionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{13}
}
func (m *QueryApprovedActionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryApprovedActionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryApprovedActionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryApprovedActionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryApprovedActionsResponse.Merge(m, src)
}
func (m *QueryApprovedActionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryApprovedActionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryApprovedActionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryApprovedActionsResponse proto.InternalMessageInfo

func (m *QueryApprovedActionsResponse) GetApprovedActions() []PulsarAction {
	if m != nil {
		return m.ApprovedActions
	}
	return nil
}

func (m *QueryApprovedActionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBridgeStateRequest struct {
}

func (m *QueryBridgeStateRequest) Reset()         { *m = QueryBridgeStateRequest{} }
func (m *QueryBridgeStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeStateRequest) ProtoMessage()    {}
func (*QueryBridgeStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{14}
}
func (m *QueryBridgeStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeStateRequest.Merge(m, src)
}
func (m *QueryBridgeStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeStateRequest proto.InternalMessageInfo

type QueryBridgeStateResponse struct {
	BridgeState BridgeState `protobuf:"bytes,1,opt,name=bridge_state,json=bridgeState,proto3" json:"bridge_state"`
}

func (m *QueryBridgeStateResponse) Reset()         { *m = QueryBridgeStateResponse{} }
func (m *QueryBridgeStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeStateResponse) ProtoMessage()    {}
func (*QueryBridgeStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d28a7fdbf2c848e, []int{15}
}
func (m *QueryBridgeStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeStateResponse.Merge(m, src)
}
func (m *QueryBridgeStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeStateResponse proto.InternalMessageInfo

func (m *QueryBridgeStateResponse) GetBridgeState() BridgeState {
	if m != nil {
		return m.BridgeState
	}
	return BridgeState{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "interchain_security.bridge.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "interchain_security.bridge.QueryParamsResponse")
	proto.RegisterType((*QueryTestRequest)(nil), "interchain_security.bridge.QueryTestRequest")
	proto.RegisterType((*QueryTestResponse)(nil), "interchain_security.bridge.QueryTestResponse")
	proto.RegisterType((*QueryWithdrawalBalanceRequest)(nil), "interchain_security.bridge.QueryWithdrawalBalanceRequest")
	proto.RegisterType((*QueryWithdrawalBalanceResponse)(nil), "interchain_security.bridge.QueryWithdrawalBalanceResponse")
	proto.RegisterType((*QueryWithdrawalBalancesRequest)(nil), "interchain_security.bridge.QueryWithdrawalBalancesRequest")
	proto.RegisterType((*QueryWithdrawalBalancesResponse)(nil), "interchain_security.bridge.QueryWithdrawalBalancesResponse")
	proto.RegisterType((*QueryRewardBalanceRequest)(nil), "interchain_security.bridge.QueryRewardBalanceRequest")
	proto.RegisterType((*QueryRewardBalanceResponse)(nil), "interchain_security.bridge.QueryRewardBalanceResponse")
	proto.RegisterType((*QueryRewardBalancesRequest)(nil), "interchain_security.bridge.QueryRewardBalancesRequest")
	proto.RegisterType((*QueryRewardBalancesResponse)(nil), "interchain_security.bridge.QueryRewardBalancesResponse")
	proto.RegisterType((*QueryApprovedActionsRequest)(nil), "interchain_security.bridge.QueryApprovedActionsRequest")
	proto.RegisterType((*QueryApprovedActionsResponse)(nil), "interchain_security.bridge.QueryApprovedActionsResponse")
	proto.RegisterType((*QueryBridgeStateRequest)(nil), "interchain_security.bridge.QueryBridgeStateRequest")
	proto.RegisterType((*QueryBridgeStateResponse)(nil), "interchain_security.bridge.QueryBridgeStateResponse")
}

func init() {
	proto.RegisterFile("interchain_security/bridge/query.proto", fileDescriptor_6d28a7fdbf2c848e)
}

var fileDescriptor_6d28a7fdbf2c848e = []byte{
	// 925 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x14, 0xb0, 0x94, 0x67, 0x68, 0x9a, 0x69, 0x81, 0x74, 0x69, 0x9c, 0xb0, 0xa0, 0x26,
	0x4d, 0x9b, 0x1d, 0x9c, 0xb4, 0x84, 0xb6, 0x02, 0x54, 0x23, 0x40, 0xa8, 0x97, 0xe0, 0x22, 0x15,
	0x10, 0x92, 0x35, 0xb6, 0x47, 0xf6, 0xaa, 0xf6, 0xce, 0x76, 0x67, 0xdc, 0x60, 0x21, 0x2e, 0xfc,
	0x02, 0x04, 0xe2, 0x17, 0x70, 0xe1, 0x82, 0xc4, 0x89, 0x03, 0x17, 0x10, 0x07, 0xd4, 0x1b, 0x91,
	0xb8, 0x20, 0x0e, 0x11, 0x4a, 0x90, 0xf8, 0x1b, 0x68, 0x67, 0x9e, 0x13, 0x6f, 0xd6, 0xde, 0x8d,
	0x83, 0x2f, 0x91, 0x33, 0xf3, 0xde, 0xfb, 0xbe, 0xef, 0xbd, 0xd1, 0xf7, 0x16, 0x2e, 0xfb, 0x81,
	0x16, 0x51, 0xa3, 0xcd, 0xfd, 0xa0, 0xa6, 0x44, 0xa3, 0x17, 0xf9, 0xba, 0xcf, 0xea, 0x91, 0xdf,
	0x6c, 0x09, 0xf6, 0xb0, 0x27, 0xa2, 0xbe, 0x17, 0x46, 0x52, 0x4b, 0xea, 0x8c, 0x88, 0xf3, 0x6c,
	0x9c, 0x33, 0xcf, 0xbb, 0x7e, 0x20, 0x99, 0xf9, 0x6b, 0xc3, 0x9d, 0x0b, 0x2d, 0xd9, 0x92, 0xe6,
	0x27, 0x8b, 0x7f, 0xe1, 0xe9, 0xa5, 0x96, 0x94, 0xad, 0x8e, 0x60, 0x3c, 0xf4, 0x19, 0x0f, 0x02,
	0xa9, 0xb9, 0xf6, 0x65, 0xa0, 0xf0, 0x76, 0xad, 0x21, 0x55, 0x57, 0x2a, 0x56, 0xe7, 0x0a, 0xb1,
	0xd9, 0xa3, 0x72, 0x5d, 0x68, 0x5e, 0x66, 0x21, 0x6f, 0xf9, 0x81, 0x09, 0xc6, 0xd8, 0x95, 0x0c,
	0xda, 0x21, 0x8f, 0x78, 0x77, 0x50, 0x34, 0x4b, 0x9f, 0xd2, 0x5c, 0x0b, 0x1b, 0xe7, 0x5e, 0x00,
	0xfa, 0x7e, 0x0c, 0xb9, 0x6d, 0x92, 0xab, 0xe2, 0x61, 0x4f, 0x28, 0xed, 0x7e, 0x02, 0xe7, 0x13,
	0xa7, 0x2a, 0x94, 0x81, 0x12, 0xf4, 0x6d, 0x28, 0x58, 0x90, 0x05, 0xb2, 0x4c, 0x56, 0x8b, 0x1b,
	0xae, 0x37, 0xbe, 0x3b, 0x9e, 0xcd, 0xad, 0xcc, 0x3e, 0xde, 0x5b, 0x9a, 0xf9, 0xee, 0xdf, 0x1f,
	0xd6, 0x48, 0x15, 0x93, 0x5d, 0x0a, 0xe7, 0x4c, 0xf5, 0x0f, 0x84, 0xd2, 0x03, 0xc4, 0xab, 0x30,
	0x3f, 0x74, 0x86, 0x78, 0xcf, 0x41, 0x21, 0x12, 0xaa, 0xd7, 0xd1, 0x06, 0x6f, 0xb6, 0x8a, 0xff,
	0xb9, 0x6f, 0xc0, 0xa2, 0x09, 0xbe, 0xef, 0xeb, 0x76, 0x33, 0xe2, 0x3b, 0xbc, 0x53, 0xe1, 0x1d,
	0x1e, 0x34, 0x04, 0x56, 0xa3, 0x8b, 0x00, 0x61, 0xaf, 0xde, 0xf1, 0x1b, 0xb5, 0x07, 0xa2, 0x8f,
	0xc9, 0xb3, 0xf6, 0xe4, 0xae, 0xe8, 0xbb, 0xf7, 0xa1, 0x34, 0x2e, 0x1f, 0x91, 0x6f, 0x40, 0x81,
	0x77, 0x65, 0x2f, 0x40, 0xe4, 0xca, 0x62, 0xac, 0xe2, 0xaf, 0xbd, 0xa5, 0x67, 0xed, 0xac, 0x54,
	0xf3, 0x81, 0xe7, 0x4b, 0xd6, 0xe5, 0xba, 0xed, 0xbd, 0x17, 0xe8, 0x2a, 0x06, 0xbb, 0xed, 0x71,
	0x85, 0x07, 0x9d, 0xa5, 0xef, 0x00, 0x1c, 0x0d, 0x15, 0xdb, 0x78, 0xd9, 0xb3, 0x55, 0xbd, 0xf8,
	0x05, 0x78, 0xf6, 0xf5, 0xe1, 0x0b, 0xf0, 0xb6, 0x79, 0x6b, 0xa0, 0xaa, 0x3a, 0x94, 0xe9, 0xee,
	0x12, 0x58, 0x1a, 0x0b, 0x85, 0x22, 0x9a, 0x70, 0x7e, 0xe7, 0xf0, 0xb6, 0x56, 0xc7, 0xeb, 0x05,
	0xb2, 0xfc, 0xc4, 0x6a, 0x71, 0x63, 0x3d, 0x6b, 0x76, 0xa9, 0xa2, 0x95, 0x27, 0xe3, 0x06, 0x54,
	0xe9, 0x4e, 0x0a, 0x8d, 0xbe, 0x9b, 0x50, 0x74, 0xc6, 0x28, 0x5a, 0xc9, 0x55, 0x64, 0x29, 0x26,
	0x24, 0xdd, 0x82, 0x8b, 0x46, 0x51, 0x55, 0xec, 0xf0, 0xa8, 0x39, 0xd9, 0x44, 0xef, 0x81, 0x33,
	0x2a, 0xf7, 0xff, 0x4d, 0xb3, 0x39, 0xaa, 0xe8, 0xd4, 0x27, 0xf9, 0x0b, 0x81, 0x17, 0x46, 0xc2,
	0x20, 0xf9, 0x0f, 0x61, 0x2e, 0x32, 0x37, 0xc7, 0x27, 0x78, 0x25, 0x6b, 0x82, 0x89, 0x62, 0x38,
	0xbd, 0xb3, 0x51, 0x02, 0x61, 0x7a, 0x93, 0x13, 0xa8, 0xe0, 0x4e, 0x18, 0x46, 0xf2, 0x91, 0x68,
	0xde, 0x69, 0x18, 0x7f, 0x9b, 0x76, 0xa7, 0x7e, 0x25, 0x70, 0x69, 0x34, 0x0e, 0xb6, 0xea, 0x23,
	0x38, 0xc7, 0xf1, 0xaa, 0xc6, 0xed, 0x1d, 0xf6, 0x6a, 0x35, 0xd3, 0xa9, 0x7a, 0x1d, 0xc5, 0x23,
	0x5b, 0x0c, 0x5b, 0x35, 0xc7, 0x93, 0x10, 0xd3, 0xeb, 0xd5, 0x45, 0x78, 0xde, 0x68, 0xa8, 0x18,
	0xec, 0x7b, 0xb1, 0x15, 0x0f, 0x3c, 0xb0, 0x03, 0x0b, 0xe9, 0x2b, 0x94, 0xb6, 0x0d, 0x4f, 0x5b,
	0xb6, 0x35, 0xe3, 0xde, 0xd8, 0xc5, 0x95, 0x2c, 0x59, 0x43, 0x65, 0x50, 0x55, 0xb1, 0x7e, 0x74,
	0xb4, 0xf1, 0x7d, 0x11, 0x9e, 0x32, 0x70, 0xf4, 0x1b, 0x02, 0x05, 0xeb, 0xd6, 0xd4, 0xcb, 0x2a,
	0x98, 0x5e, 0x14, 0x0e, 0x3b, 0x71, 0xbc, 0xd5, 0xe1, 0xae, 0x7d, 0xf1, 0xc7, 0x3f, 0x5f, 0x9f,
	0x79, 0x99, 0xba, 0x2c, 0x77, 0x93, 0xd1, 0xaf, 0x08, 0xcc, 0xc6, 0xfb, 0xc0, 0xb2, 0xbc, 0x96,
	0x0b, 0x35, 0xb4, 0x4f, 0x9c, 0xf5, 0x13, 0x46, 0x23, 0xad, 0x55, 0x43, 0xcb, 0xa5, 0xcb, 0x59,
	0xb4, 0x74, 0xfc, 0x98, 0x7f, 0x27, 0x30, 0x9f, 0xb2, 0x47, 0x7a, 0x33, 0x17, 0x6e, 0xdc, 0xae,
	0x72, 0x6e, 0x9d, 0x26, 0x15, 0x69, 0xbf, 0x65, 0x68, 0xbf, 0x4e, 0x6f, 0x67, 0xd1, 0x4e, 0xef,
	0x00, 0xf6, 0xd9, 0x91, 0x97, 0x7e, 0x4e, 0x7f, 0x23, 0x40, 0xd3, 0x5b, 0x84, 0x9e, 0x82, 0xd7,
	0xe1, 0xb3, 0xb8, 0x7d, 0xaa, 0x5c, 0x14, 0xb5, 0x65, 0x44, 0x95, 0x29, 0x9b, 0x4c, 0x94, 0xa2,
	0x3f, 0x13, 0x78, 0x26, 0xe1, 0x7b, 0xf4, 0x46, 0x2e, 0x8f, 0x51, 0xcb, 0xc6, 0x79, 0x75, 0xd2,
	0x34, 0x64, 0xfe, 0xa6, 0x61, 0x7e, 0x93, 0x6e, 0x65, 0x31, 0x4f, 0x9a, 0x79, 0x72, 0x14, 0x3f,
	0x12, 0x38, 0x9b, 0x5c, 0x03, 0x74, 0x42, 0x2e, 0x87, 0x23, 0xd8, 0x9a, 0x38, 0x0f, 0x45, 0x6c,
	0x1a, 0x11, 0xeb, 0xf4, 0xea, 0xc9, 0x45, 0x28, 0xfa, 0x13, 0x81, 0xb9, 0x63, 0xae, 0x4c, 0xf3,
	0x19, 0x8c, 0xde, 0x17, 0xce, 0x6b, 0x93, 0x27, 0x22, 0xf7, 0xeb, 0x86, 0xbb, 0x47, 0xaf, 0x65,
	0x71, 0x3f, 0xbe, 0x22, 0xe8, 0xb7, 0x04, 0x8a, 0x43, 0x66, 0x49, 0x37, 0x73, 0xf1, 0xd3, 0xe6,
	0xed, 0x5c, 0x9f, 0x2c, 0x09, 0x09, 0x5f, 0x31, 0x84, 0x5f, 0xa2, 0x2f, 0xb2, 0xbc, 0xef, 0xf5,
	0xca, 0xdd, 0xc7, 0xfb, 0x25, 0xb2, 0xbb, 0x5f, 0x22, 0x7f, 0xef, 0x97, 0xc8, 0x97, 0x07, 0xa5,
	0x99, 0xdd, 0x83, 0xd2, 0xcc, 0x9f, 0x07, 0xa5, 0x99, 0x8f, 0xcb, 0x2d, 0x5f, 0xb7, 0x7b, 0x75,
	0xaf, 0x21, 0xbb, 0x2c, 0x90, 0x4d, 0x51, 0x7e, 0xa5, 0xbc, 0xee, 0x4b, 0x16, 0x9a, 0xb5, 0xc6,
	0x4c, 0x4d, 0xf6, 0xe9, 0xa1, 0x89, 0xf5, 0x43, 0xa1, 0xea, 0x05, 0xf3, 0xf5, 0xbf, 0xf9, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x36, 0x23, 0xbe, 0x07, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TestQuery returns a test string "node101"
	TestQuery(ctx context.Context, in *QueryTestRequest, opts ...grpc.CallOption) (*QueryTestResponse, error)
	// Queries withdrawal balance by public key.
	WithdrawalBalance(ctx context.Context, in *QueryWithdrawalBalanceRequest, opts ...grpc.CallOption) (*QueryWithdrawalBalanceResponse, error)
	// Queries all withdrawal balances.
	WithdrawalBalances(ctx context.Context, in *QueryWithdrawalBalancesRequest, opts ...grpc.CallOption) (*QueryWithdrawalBalancesResponse, error)
	// Queries reward balance by public key.
	RewardBalance(ctx context.Context, in *QueryRewardBalanceRequest, opts ...grpc.CallOption) (*QueryRewardBalanceResponse, error)
	// Queries all reward balances.
	RewardBalances(ctx context.Context, in *QueryRewardBalancesRequest, opts ...grpc.CallOption) (*QueryRewardBalancesResponse, error)
	// Queries approved actions.
	ApprovedActions(ctx context.Context, in *QueryApprovedActionsRequest, opts ...grpc.CallOption) (*QueryApprovedActionsResponse, error)
	// Queries bridge state.
	BridgeState(ctx context.Context, in *QueryBridgeStateRequest, opts ...grpc.CallOption) (*QueryBridgeStateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.bridge.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TestQuery(ctx context.Context, in *QueryTestRequest, opts ...grpc.CallOption) (*QueryTestResponse, error) {
	out := new(QueryTestResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.bridge.Query/TestQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawalBalance(ctx context.Context, in *QueryWithdrawalBalanceRequest, opts ...grpc.CallOption) (*QueryWithdrawalBalanceResponse, error) {
	out := new(QueryWithdrawalBalanceResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.bridge.Query/WithdrawalBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawalBalances(ctx context.Context, in *QueryWithdrawalBalancesRequest, opts ...grpc.CallOption) (*QueryWithdrawalBalancesResponse, error) {
	out := new(QueryWithdrawalBalancesResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.bridge.Query/WithdrawalBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardBalance(ctx context.Context, in *QueryRewardBalanceRequest, opts ...grpc.CallOption) (*QueryRewardBalanceResponse, error) {
	out := new(QueryRewardBalanceResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.bridge.Query/RewardBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardBalances(ctx context.Context, in *QueryRewardBalancesRequest, opts ...grpc.CallOption) (*QueryRewardBalancesResponse, error) {
	out := new(QueryRewardBalancesResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.bridge.Query/RewardBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedActions(ctx context.Context, in *QueryApprovedActionsRequest, opts ...grpc.CallOption) (*QueryApprovedActionsResponse, error) {
	out := new(QueryApprovedActionsResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.bridge.Query/ApprovedActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeState(ctx context.Context, in *QueryBridgeStateRequest, opts ...grpc.CallOption) (*QueryBridgeStateResponse, error) {
	out := new(QueryBridgeStateResponse)
	err := c.cc.Invoke(ctx, "/interchain_security.bridge.Query/BridgeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TestQuery returns a test string "node101"
	TestQuery(context.Context, *QueryTestRequest) (*QueryTestResponse, error)
	// Queries withdrawal balance by public key.
	WithdrawalBalance(context.Context, *QueryWithdrawalBalanceRequest) (*QueryWithdrawalBalanceResponse, error)
	// Queries all withdrawal balances.
	WithdrawalBalances(context.Context, *QueryWithdrawalBalancesRequest) (*QueryWithdrawalBalancesResponse, error)
	// Queries reward balance by public key.
	RewardBalance(context.Context, *QueryRewardBalanceRequest) (*QueryRewardBalanceResponse, error)
	// Queries all reward balances.
	RewardBalances(context.Context, *QueryRewardBalancesRequest) (*QueryRewardBalancesResponse, error)
	// Queries approved actions.
	ApprovedActions(context.Context, *QueryApprovedActionsRequest) (*QueryApprovedActionsResponse, error)
	// Queries bridge state.
	BridgeState(context.Context, *QueryBridgeStateRequest) (*QueryBridgeStateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TestQuery(ctx context.Context, req *QueryTestRequest) (*QueryTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestQuery not implemented")
}
func (*UnimplementedQueryServer) WithdrawalBalance(ctx context.Context, req *QueryWithdrawalBalanceRequest) (*QueryWithdrawalBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalBalance not implemented")
}
func (*UnimplementedQueryServer) WithdrawalBalances(ctx context.Context, req *QueryWithdrawalBalancesRequest) (*QueryWithdrawalBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalBalances not implemented")
}
func (*UnimplementedQueryServer) RewardBalance(ctx context.Context, req *QueryRewardBalanceRequest) (*QueryRewardBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardBalance not implemented")
}
func (*UnimplementedQueryServer) RewardBalances(ctx context.Context, req *QueryRewardBalancesRequest) (*QueryRewardBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardBalances not implemented")
}
func (*UnimplementedQueryServer) ApprovedActions(ctx context.Context, req *QueryApprovedActionsRequest) (*QueryApprovedActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedActions not implemented")
}
func (*UnimplementedQueryServer) BridgeState(ctx context.Context, req *QueryBridgeStateRequest) (*QueryBridgeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeState not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.bridge.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TestQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TestQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.bridge.Query/TestQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TestQuery(ctx, req.(*QueryTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.bridge.Query/WithdrawalBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawalBalance(ctx, req.(*QueryWithdrawalBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawalBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawalBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.bridge.Query/WithdrawalBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawalBalances(ctx, req.(*QueryWithdrawalBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.bridge.Query/RewardBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardBalance(ctx, req.(*QueryRewardBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.bridge.Query/RewardBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardBalances(ctx, req.(*QueryRewardBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApprovedActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.bridge.Query/ApprovedActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedActions(ctx, req.(*QueryApprovedActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interchain_security.bridge.Query/BridgeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeState(ctx, req.(*QueryBridgeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interchain_security.bridge.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TestQuery",
			Handler:    _Query_TestQuery_Handler,
		},
		{
			MethodName: "WithdrawalBalance",
			Handler:    _Query_WithdrawalBalance_Handler,
		},
		{
			MethodName: "WithdrawalBalances",
			Handler:    _Query_WithdrawalBalances_Handler,
		},
		{
			MethodName: "RewardBalance",
			Handler:    _Query_RewardBalance_Handler,
		},
		{
			MethodName: "RewardBalances",
			Handler:    _Query_RewardBalances_Handler,
		},
		{
			MethodName: "ApprovedActions",
			Handler:    _Query_ApprovedActions_Handler,
		},
		{
			MethodName: "BridgeState",
			Handler:    _Query_BridgeState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interchain_security/bridge/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawalBalances) > 0 {
		for iNdEx := len(m.WithdrawalBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawalBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardBalances) > 0 {
		for iNdEx := len(m.RewardBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryApprovedActionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryApprovedActionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryApprovedActionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryApprovedActionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryApprovedActionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryApprovedActionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApprovedActions) > 0 {
		for iNdEx := len(m.ApprovedActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBridgeStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BridgeState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawalBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawalBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWithdrawalBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawalBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawalBalances) > 0 {
		for _, e := range m.WithdrawalBalances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardBalances) > 0 {
		for _, e := range m.RewardBalances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryApprovedActionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryApprovedActionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApprovedActions) > 0 {
		for _, e := range m.ApprovedActions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBridgeStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBridgeStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BridgeState.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalBalances = append(m.WithdrawalBalances, WithdrawalBalance{})
			if err := m.WithdrawalBalances[len(m.WithdrawalBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardBalances = append(m.RewardBalances, RewardBalance{})
			if err := m.RewardBalances[len(m.RewardBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryApprovedActionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryApprovedActionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryApprovedActionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryApprovedActionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryApprovedActionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryApprovedActionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedActions = append(m.ApprovedActions, PulsarAction{})
			if err := m.ApprovedActions[len(m.ApprovedActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
