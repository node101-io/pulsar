// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/bridge/state.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WithdrawalBalance represents a withdrawal balance for a public key
type WithdrawalBalance struct {
	PublicKey string                `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Amount    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *WithdrawalBalance) Reset()         { *m = WithdrawalBalance{} }
func (m *WithdrawalBalance) String() string { return proto.CompactTextString(m) }
func (*WithdrawalBalance) ProtoMessage()    {}
func (*WithdrawalBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c083345ad62a6b, []int{0}
}
func (m *WithdrawalBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalBalance.Merge(m, src)
}
func (m *WithdrawalBalance) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalBalance.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalBalance proto.InternalMessageInfo

func (m *WithdrawalBalance) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

// RewardBalance represents a reward balance for a public key
type RewardBalance struct {
	PublicKey string                `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Amount    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *RewardBalance) Reset()         { *m = RewardBalance{} }
func (m *RewardBalance) String() string { return proto.CompactTextString(m) }
func (*RewardBalance) ProtoMessage()    {}
func (*RewardBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c083345ad62a6b, []int{1}
}
func (m *RewardBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardBalance.Merge(m, src)
}
func (m *RewardBalance) XXX_Size() int {
	return m.Size()
}
func (m *RewardBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardBalance.DiscardUnknown(m)
}

var xxx_messageInfo_RewardBalance proto.InternalMessageInfo

func (m *RewardBalance) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

// PulsarAction represents an action in the Pulsar system
type PulsarAction struct {
	PublicKey   string                `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Amount      cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	ActionType  string                `protobuf:"bytes,3,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	BlockHeight uint64                `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *PulsarAction) Reset()         { *m = PulsarAction{} }
func (m *PulsarAction) String() string { return proto.CompactTextString(m) }
func (*PulsarAction) ProtoMessage()    {}
func (*PulsarAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c083345ad62a6b, []int{2}
}
func (m *PulsarAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulsarAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PulsarAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PulsarAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulsarAction.Merge(m, src)
}
func (m *PulsarAction) XXX_Size() int {
	return m.Size()
}
func (m *PulsarAction) XXX_DiscardUnknown() {
	xxx_messageInfo_PulsarAction.DiscardUnknown(m)
}

var xxx_messageInfo_PulsarAction proto.InternalMessageInfo

func (m *PulsarAction) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *PulsarAction) GetActionType() string {
	if m != nil {
		return m.ActionType
	}
	return ""
}

func (m *PulsarAction) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// PulsarActionList represents a list of actions for storage
type PulsarActionList struct {
	Actions []PulsarAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions"`
}

func (m *PulsarActionList) Reset()         { *m = PulsarActionList{} }
func (m *PulsarActionList) String() string { return proto.CompactTextString(m) }
func (*PulsarActionList) ProtoMessage()    {}
func (*PulsarActionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c083345ad62a6b, []int{3}
}
func (m *PulsarActionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulsarActionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PulsarActionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PulsarActionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulsarActionList.Merge(m, src)
}
func (m *PulsarActionList) XXX_Size() int {
	return m.Size()
}
func (m *PulsarActionList) XXX_DiscardUnknown() {
	xxx_messageInfo_PulsarActionList.DiscardUnknown(m)
}

var xxx_messageInfo_PulsarActionList proto.InternalMessageInfo

func (m *PulsarActionList) GetActions() []PulsarAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

// BridgeState represents the complete state of the bridge module
type BridgeState struct {
	WithdrawalBalances []WithdrawalBalance `protobuf:"bytes,1,rep,name=withdrawal_balances,json=withdrawalBalances,proto3" json:"withdrawal_balances"`
	RewardBalances     []RewardBalance     `protobuf:"bytes,2,rep,name=reward_balances,json=rewardBalances,proto3" json:"reward_balances"`
	ApprovedActions    []PulsarAction      `protobuf:"bytes,3,rep,name=approved_actions,json=approvedActions,proto3" json:"approved_actions"`
	ApprovedActionHash string              `protobuf:"bytes,4,opt,name=approved_action_hash,json=approvedActionHash,proto3" json:"approved_action_hash,omitempty"`
	AllActionHash      string              `protobuf:"bytes,5,opt,name=all_action_hash,json=allActionHash,proto3" json:"all_action_hash,omitempty"`
	SettledBlockHeight uint64              `protobuf:"varint,6,opt,name=settled_block_height,json=settledBlockHeight,proto3" json:"settled_block_height,omitempty"`
}

func (m *BridgeState) Reset()         { *m = BridgeState{} }
func (m *BridgeState) String() string { return proto.CompactTextString(m) }
func (*BridgeState) ProtoMessage()    {}
func (*BridgeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c083345ad62a6b, []int{4}
}
func (m *BridgeState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeState.Merge(m, src)
}
func (m *BridgeState) XXX_Size() int {
	return m.Size()
}
func (m *BridgeState) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeState.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeState proto.InternalMessageInfo

func (m *BridgeState) GetWithdrawalBalances() []WithdrawalBalance {
	if m != nil {
		return m.WithdrawalBalances
	}
	return nil
}

func (m *BridgeState) GetRewardBalances() []RewardBalance {
	if m != nil {
		return m.RewardBalances
	}
	return nil
}

func (m *BridgeState) GetApprovedActions() []PulsarAction {
	if m != nil {
		return m.ApprovedActions
	}
	return nil
}

func (m *BridgeState) GetApprovedActionHash() string {
	if m != nil {
		return m.ApprovedActionHash
	}
	return ""
}

func (m *BridgeState) GetAllActionHash() string {
	if m != nil {
		return m.AllActionHash
	}
	return ""
}

func (m *BridgeState) GetSettledBlockHeight() uint64 {
	if m != nil {
		return m.SettledBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*WithdrawalBalance)(nil), "interchain_security.bridge.WithdrawalBalance")
	proto.RegisterType((*RewardBalance)(nil), "interchain_security.bridge.RewardBalance")
	proto.RegisterType((*PulsarAction)(nil), "interchain_security.bridge.PulsarAction")
	proto.RegisterType((*PulsarActionList)(nil), "interchain_security.bridge.PulsarActionList")
	proto.RegisterType((*BridgeState)(nil), "interchain_security.bridge.BridgeState")
}

func init() {
	proto.RegisterFile("interchain_security/bridge/state.proto", fileDescriptor_16c083345ad62a6b)
}

var fileDescriptor_16c083345ad62a6b = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x6e, 0xd3, 0x30,
	0x1c, 0x6e, 0xd6, 0x52, 0xd4, 0x5f, 0x37, 0xba, 0x99, 0x22, 0x55, 0x95, 0x96, 0x96, 0x1e, 0xa6,
	0x72, 0x58, 0xd2, 0x82, 0x78, 0x00, 0x72, 0x2a, 0x1a, 0x07, 0x14, 0x90, 0xf8, 0x23, 0xa4, 0xc8,
	0x49, 0xac, 0xc6, 0xaa, 0x13, 0x47, 0xb6, 0x43, 0xc9, 0x5b, 0xf0, 0x18, 0x3c, 0x00, 0x0f, 0xb1,
	0xe3, 0x8e, 0x88, 0xc3, 0x84, 0xda, 0x17, 0x41, 0x71, 0x1a, 0xd6, 0x0e, 0xd8, 0x61, 0xd2, 0x2e,
	0x95, 0xf5, 0xfd, 0x3e, 0x7f, 0x9f, 0xed, 0xef, 0x6b, 0xe0, 0x84, 0x26, 0x8a, 0x88, 0x20, 0xc2,
	0x34, 0xf1, 0x24, 0x09, 0x32, 0x41, 0x55, 0x6e, 0xfb, 0x82, 0x86, 0x73, 0x62, 0x4b, 0x85, 0x15,
	0xb1, 0x52, 0xc1, 0x15, 0x47, 0xfd, 0x7f, 0xf0, 0xac, 0x92, 0xd7, 0x3f, 0xc2, 0x31, 0x4d, 0xb8,
	0xad, 0x7f, 0x4b, 0x7a, 0xbf, 0x3b, 0xe7, 0x73, 0xae, 0x97, 0x76, 0xb1, 0x2a, 0xd1, 0x11, 0x85,
	0xa3, 0x77, 0x54, 0x45, 0xa1, 0xc0, 0x4b, 0xcc, 0x1c, 0xcc, 0x70, 0x12, 0x10, 0x74, 0x0c, 0x90,
	0x66, 0x3e, 0xa3, 0x81, 0xb7, 0x20, 0x79, 0xcf, 0x18, 0x1a, 0xe3, 0x96, 0xdb, 0x2a, 0x91, 0x33,
	0x92, 0xa3, 0xe7, 0xd0, 0xc4, 0x31, 0xcf, 0x12, 0xd5, 0xdb, 0x2b, 0x46, 0xce, 0xf1, 0xf9, 0xe5,
	0xa0, 0xf6, 0xf3, 0x72, 0xf0, 0x28, 0xe0, 0x32, 0xe6, 0x52, 0x86, 0x0b, 0x8b, 0x72, 0x3b, 0xc6,
	0x2a, 0xb2, 0x5e, 0x26, 0xca, 0xdd, 0x90, 0x47, 0x04, 0x0e, 0x5c, 0xb2, 0xc4, 0x22, 0xbc, 0x5b,
	0x9b, 0x6f, 0x06, 0xec, 0xbf, 0xce, 0x98, 0xc4, 0xe2, 0x45, 0xa0, 0x28, 0x4f, 0xee, 0xc6, 0x06,
	0x0d, 0xa0, 0x8d, 0xb5, 0xbe, 0xa7, 0xf2, 0x94, 0xf4, 0xea, 0x5a, 0x16, 0x4a, 0xe8, 0x6d, 0x9e,
	0x12, 0xf4, 0x18, 0xf6, 0x7d, 0xc6, 0x83, 0x85, 0x17, 0x11, 0x3a, 0x8f, 0x54, 0xaf, 0x31, 0x34,
	0xc6, 0x0d, 0xb7, 0xad, 0xb1, 0x99, 0x86, 0x46, 0x9f, 0xe0, 0x70, 0xfb, 0xa4, 0xaf, 0xa8, 0x54,
	0x68, 0x06, 0xf7, 0x4b, 0x11, 0xd9, 0x33, 0x86, 0xf5, 0x71, 0xfb, 0xe9, 0xd8, 0xfa, 0x7f, 0xce,
	0xd6, 0xf6, 0x76, 0xa7, 0x51, 0x9c, 0xdc, 0xad, 0xb6, 0x8f, 0xbe, 0xd7, 0xa1, 0xed, 0x68, 0xda,
	0x9b, 0xa2, 0x35, 0x28, 0x84, 0x87, 0xcb, 0x3f, 0x51, 0x7b, 0x7e, 0x19, 0x42, 0xe5, 0x72, 0x7a,
	0x93, 0xcb, 0x5f, 0x0d, 0xd9, 0x58, 0xa1, 0xe5, 0xf5, 0x81, 0x44, 0xef, 0xa1, 0x23, 0x74, 0xca,
	0x57, 0x0e, 0x7b, 0xda, 0xe1, 0xc9, 0x4d, 0x0e, 0x3b, 0xc5, 0xd8, 0xa8, 0x3f, 0x10, 0xdb, 0xa0,
	0x44, 0x1f, 0xe0, 0x10, 0xa7, 0xa9, 0xe0, 0x9f, 0x49, 0xe8, 0x55, 0x4f, 0x54, 0xbf, 0xd5, 0x13,
	0x75, 0x2a, 0x9d, 0x12, 0x95, 0x68, 0x02, 0xdd, 0x6b, 0xd2, 0x5e, 0x84, 0x65, 0xa4, 0x33, 0x6b,
	0xb9, 0x68, 0x97, 0x3e, 0xc3, 0x32, 0x42, 0x27, 0xd0, 0xc1, 0x8c, 0xed, 0x90, 0xef, 0x69, 0xf2,
	0x01, 0x66, 0x6c, 0x8b, 0x37, 0x81, 0xae, 0x24, 0x4a, 0x31, 0x12, 0x7a, 0x3b, 0x6d, 0x68, 0xea,
	0x36, 0xa0, 0xcd, 0xcc, 0xb9, 0x2a, 0x85, 0x73, 0x76, 0xbe, 0x32, 0x8d, 0x8b, 0x95, 0x69, 0xfc,
	0x5a, 0x99, 0xc6, 0xd7, 0xb5, 0x59, 0xbb, 0x58, 0x9b, 0xb5, 0x1f, 0x6b, 0xb3, 0xf6, 0x71, 0x3a,
	0xa7, 0x2a, 0xca, 0x7c, 0x2b, 0xe0, 0xb1, 0x9d, 0xf0, 0x90, 0x4c, 0x27, 0xd3, 0x53, 0xca, 0xed,
	0x54, 0x5f, 0xd0, 0xd6, 0xb7, 0xb7, 0xbf, 0x54, 0x5f, 0x8a, 0xa2, 0x95, 0xd2, 0x6f, 0xea, 0x7f,
	0xf9, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xa6, 0x55, 0x88, 0x54, 0x04, 0x00, 0x00,
}

func (m *WithdrawalBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PulsarAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PulsarAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PulsarAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ActionType) > 0 {
		i -= len(m.ActionType)
		copy(dAtA[i:], m.ActionType)
		i = encodeVarintState(dAtA, i, uint64(len(m.ActionType)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PulsarActionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PulsarActionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PulsarActionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BridgeState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettledBlockHeight != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.SettledBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AllActionHash) > 0 {
		i -= len(m.AllActionHash)
		copy(dAtA[i:], m.AllActionHash)
		i = encodeVarintState(dAtA, i, uint64(len(m.AllActionHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ApprovedActionHash) > 0 {
		i -= len(m.ApprovedActionHash)
		copy(dAtA[i:], m.ApprovedActionHash)
		i = encodeVarintState(dAtA, i, uint64(len(m.ApprovedActionHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApprovedActions) > 0 {
		for iNdEx := len(m.ApprovedActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RewardBalances) > 0 {
		for iNdEx := len(m.RewardBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WithdrawalBalances) > 0 {
		for iNdEx := len(m.WithdrawalBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawalBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WithdrawalBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *RewardBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *PulsarAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovState(uint64(l))
	l = len(m.ActionType)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovState(uint64(m.BlockHeight))
	}
	return n
}

func (m *PulsarActionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func (m *BridgeState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawalBalances) > 0 {
		for _, e := range m.WithdrawalBalances {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	if len(m.RewardBalances) > 0 {
		for _, e := range m.RewardBalances {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	if len(m.ApprovedActions) > 0 {
		for _, e := range m.ApprovedActions {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	l = len(m.ApprovedActionHash)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.AllActionHash)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.SettledBlockHeight != 0 {
		n += 1 + sovState(uint64(m.SettledBlockHeight))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WithdrawalBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PulsarAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PulsarAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PulsarAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PulsarActionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PulsarActionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PulsarActionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, PulsarAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalBalances = append(m.WithdrawalBalances, WithdrawalBalance{})
			if err := m.WithdrawalBalances[len(m.WithdrawalBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardBalances = append(m.RewardBalances, RewardBalance{})
			if err := m.RewardBalances[len(m.RewardBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedActions = append(m.ApprovedActions, PulsarAction{})
			if err := m.ApprovedActions[len(m.ApprovedActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedActionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedActionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllActionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllActionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledBlockHeight", wireType)
			}
			m.SettledBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettledBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
