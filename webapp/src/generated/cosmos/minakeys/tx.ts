// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cosmos/minakeys/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "cosmos.minakeys";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgCreateKeyStore {
  creator: string;
  cosmosPublicKey: string;
  minaPublicKey: string;
  cosmosSignature: Uint8Array;
  minaSignature: Uint8Array;
}

export interface MsgCreateKeyStoreResponse {
}

export interface MsgUpdateKeyStore {
  creator: string;
  cosmosPublicKey: string;
  minaPublicKey: string;
  cosmosSignature: Uint8Array;
  minaSignature: Uint8Array;
}

export interface MsgUpdateKeyStoreResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateKeyStore(): MsgCreateKeyStore {
  return {
    creator: "",
    cosmosPublicKey: "",
    minaPublicKey: "",
    cosmosSignature: new Uint8Array(0),
    minaSignature: new Uint8Array(0),
  };
}

export const MsgCreateKeyStore: MessageFns<MsgCreateKeyStore> = {
  encode(message: MsgCreateKeyStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.cosmosPublicKey !== "") {
      writer.uint32(18).string(message.cosmosPublicKey);
    }
    if (message.minaPublicKey !== "") {
      writer.uint32(26).string(message.minaPublicKey);
    }
    if (message.cosmosSignature.length !== 0) {
      writer.uint32(34).bytes(message.cosmosSignature);
    }
    if (message.minaSignature.length !== 0) {
      writer.uint32(42).bytes(message.minaSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateKeyStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateKeyStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cosmosPublicKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.minaPublicKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cosmosSignature = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.minaSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateKeyStore {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      cosmosPublicKey: isSet(object.cosmosPublicKey) ? globalThis.String(object.cosmosPublicKey) : "",
      minaPublicKey: isSet(object.minaPublicKey) ? globalThis.String(object.minaPublicKey) : "",
      cosmosSignature: isSet(object.cosmosSignature) ? bytesFromBase64(object.cosmosSignature) : new Uint8Array(0),
      minaSignature: isSet(object.minaSignature) ? bytesFromBase64(object.minaSignature) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgCreateKeyStore): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.cosmosPublicKey !== "") {
      obj.cosmosPublicKey = message.cosmosPublicKey;
    }
    if (message.minaPublicKey !== "") {
      obj.minaPublicKey = message.minaPublicKey;
    }
    if (message.cosmosSignature.length !== 0) {
      obj.cosmosSignature = base64FromBytes(message.cosmosSignature);
    }
    if (message.minaSignature.length !== 0) {
      obj.minaSignature = base64FromBytes(message.minaSignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateKeyStore>, I>>(base?: I): MsgCreateKeyStore {
    return MsgCreateKeyStore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateKeyStore>, I>>(object: I): MsgCreateKeyStore {
    const message = createBaseMsgCreateKeyStore();
    message.creator = object.creator ?? "";
    message.cosmosPublicKey = object.cosmosPublicKey ?? "";
    message.minaPublicKey = object.minaPublicKey ?? "";
    message.cosmosSignature = object.cosmosSignature ?? new Uint8Array(0);
    message.minaSignature = object.minaSignature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgCreateKeyStoreResponse(): MsgCreateKeyStoreResponse {
  return {};
}

export const MsgCreateKeyStoreResponse: MessageFns<MsgCreateKeyStoreResponse> = {
  encode(_: MsgCreateKeyStoreResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateKeyStoreResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateKeyStoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateKeyStoreResponse {
    return {};
  },

  toJSON(_: MsgCreateKeyStoreResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateKeyStoreResponse>, I>>(base?: I): MsgCreateKeyStoreResponse {
    return MsgCreateKeyStoreResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateKeyStoreResponse>, I>>(_: I): MsgCreateKeyStoreResponse {
    const message = createBaseMsgCreateKeyStoreResponse();
    return message;
  },
};

function createBaseMsgUpdateKeyStore(): MsgUpdateKeyStore {
  return {
    creator: "",
    cosmosPublicKey: "",
    minaPublicKey: "",
    cosmosSignature: new Uint8Array(0),
    minaSignature: new Uint8Array(0),
  };
}

export const MsgUpdateKeyStore: MessageFns<MsgUpdateKeyStore> = {
  encode(message: MsgUpdateKeyStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.cosmosPublicKey !== "") {
      writer.uint32(18).string(message.cosmosPublicKey);
    }
    if (message.minaPublicKey !== "") {
      writer.uint32(26).string(message.minaPublicKey);
    }
    if (message.cosmosSignature.length !== 0) {
      writer.uint32(34).bytes(message.cosmosSignature);
    }
    if (message.minaSignature.length !== 0) {
      writer.uint32(42).bytes(message.minaSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateKeyStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateKeyStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cosmosPublicKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.minaPublicKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cosmosSignature = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.minaSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateKeyStore {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      cosmosPublicKey: isSet(object.cosmosPublicKey) ? globalThis.String(object.cosmosPublicKey) : "",
      minaPublicKey: isSet(object.minaPublicKey) ? globalThis.String(object.minaPublicKey) : "",
      cosmosSignature: isSet(object.cosmosSignature) ? bytesFromBase64(object.cosmosSignature) : new Uint8Array(0),
      minaSignature: isSet(object.minaSignature) ? bytesFromBase64(object.minaSignature) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgUpdateKeyStore): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.cosmosPublicKey !== "") {
      obj.cosmosPublicKey = message.cosmosPublicKey;
    }
    if (message.minaPublicKey !== "") {
      obj.minaPublicKey = message.minaPublicKey;
    }
    if (message.cosmosSignature.length !== 0) {
      obj.cosmosSignature = base64FromBytes(message.cosmosSignature);
    }
    if (message.minaSignature.length !== 0) {
      obj.minaSignature = base64FromBytes(message.minaSignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateKeyStore>, I>>(base?: I): MsgUpdateKeyStore {
    return MsgUpdateKeyStore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateKeyStore>, I>>(object: I): MsgUpdateKeyStore {
    const message = createBaseMsgUpdateKeyStore();
    message.creator = object.creator ?? "";
    message.cosmosPublicKey = object.cosmosPublicKey ?? "";
    message.minaPublicKey = object.minaPublicKey ?? "";
    message.cosmosSignature = object.cosmosSignature ?? new Uint8Array(0);
    message.minaSignature = object.minaSignature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgUpdateKeyStoreResponse(): MsgUpdateKeyStoreResponse {
  return {};
}

export const MsgUpdateKeyStoreResponse: MessageFns<MsgUpdateKeyStoreResponse> = {
  encode(_: MsgUpdateKeyStoreResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateKeyStoreResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateKeyStoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateKeyStoreResponse {
    return {};
  },

  toJSON(_: MsgUpdateKeyStoreResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateKeyStoreResponse>, I>>(base?: I): MsgUpdateKeyStoreResponse {
    return MsgUpdateKeyStoreResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateKeyStoreResponse>, I>>(_: I): MsgUpdateKeyStoreResponse {
    const message = createBaseMsgUpdateKeyStoreResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  CreateKeyStore(request: MsgCreateKeyStore): Promise<MsgCreateKeyStoreResponse>;
  UpdateKeyStore(request: MsgUpdateKeyStore): Promise<MsgUpdateKeyStoreResponse>;
}

export const MsgServiceName = "cosmos.minakeys.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateKeyStore = this.CreateKeyStore.bind(this);
    this.UpdateKeyStore = this.UpdateKeyStore.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateKeyStore(request: MsgCreateKeyStore): Promise<MsgCreateKeyStoreResponse> {
    const data = MsgCreateKeyStore.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateKeyStore", data);
    return promise.then((data) => MsgCreateKeyStoreResponse.decode(new BinaryReader(data)));
  }

  UpdateKeyStore(request: MsgUpdateKeyStore): Promise<MsgUpdateKeyStoreResponse> {
    const data = MsgUpdateKeyStore.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateKeyStore", data);
    return promise.then((data) => MsgUpdateKeyStoreResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
