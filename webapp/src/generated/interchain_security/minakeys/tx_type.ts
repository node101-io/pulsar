// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/minakeys/tx_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "interchain_security.minakeys";

/** TxType defines the type of transaction for signature verification */
export enum TxType {
  /** COSMOS_TX - Default Cosmos SDK transaction */
  COSMOS_TX = 0,
  /** MINA_TX - Mina wallet transaction */
  MINA_TX = 1,
  UNRECOGNIZED = -1,
}

export function txTypeFromJSON(object: any): TxType {
  switch (object) {
    case 0:
    case "COSMOS_TX":
      return TxType.COSMOS_TX;
    case 1:
    case "MINA_TX":
      return TxType.MINA_TX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TxType.UNRECOGNIZED;
  }
}

export function txTypeToJSON(object: TxType): string {
  switch (object) {
    case TxType.COSMOS_TX:
      return "COSMOS_TX";
    case TxType.MINA_TX:
      return "MINA_TX";
    case TxType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** TxTypeExtension is used as extension option to specify transaction type */
export interface TxTypeExtension {
  txType: TxType;
}

function createBaseTxTypeExtension(): TxTypeExtension {
  return { txType: 0 };
}

export const TxTypeExtension: MessageFns<TxTypeExtension> = {
  encode(message: TxTypeExtension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txType !== 0) {
      writer.uint32(8).int32(message.txType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TxTypeExtension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTxTypeExtension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.txType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TxTypeExtension {
    return { txType: isSet(object.txType) ? txTypeFromJSON(object.txType) : 0 };
  },

  toJSON(message: TxTypeExtension): unknown {
    const obj: any = {};
    if (message.txType !== 0) {
      obj.txType = txTypeToJSON(message.txType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TxTypeExtension>, I>>(base?: I): TxTypeExtension {
    return TxTypeExtension.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TxTypeExtension>, I>>(object: I): TxTypeExtension {
    const message = createBaseTxTypeExtension();
    message.txType = object.txType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
