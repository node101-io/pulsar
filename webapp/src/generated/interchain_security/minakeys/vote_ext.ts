// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: interchain_security/minakeys/vote_ext.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "interchain_security.minakeys";

export interface VoteExt {
  index: string;
  height: string;
  validatorAddr: string;
  signature: string;
}

/** Height-based index mapping */
export interface VoteExtIndex {
  height: string;
  /** Array of VoteExt indexes for this height */
  indexes: string[];
}

function createBaseVoteExt(): VoteExt {
  return { index: "", height: "0", validatorAddr: "", signature: "" };
}

export const VoteExt: MessageFns<VoteExt> = {
  encode(message: VoteExt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.height !== "0") {
      writer.uint32(16).uint64(message.height);
    }
    if (message.validatorAddr !== "") {
      writer.uint32(26).string(message.validatorAddr);
    }
    if (message.signature !== "") {
      writer.uint32(34).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VoteExt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteExt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.validatorAddr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteExt {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      validatorAddr: isSet(object.validatorAddr) ? globalThis.String(object.validatorAddr) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: VoteExt): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.height !== "0") {
      obj.height = message.height;
    }
    if (message.validatorAddr !== "") {
      obj.validatorAddr = message.validatorAddr;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoteExt>, I>>(base?: I): VoteExt {
    return VoteExt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoteExt>, I>>(object: I): VoteExt {
    const message = createBaseVoteExt();
    message.index = object.index ?? "";
    message.height = object.height ?? "0";
    message.validatorAddr = object.validatorAddr ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseVoteExtIndex(): VoteExtIndex {
  return { height: "0", indexes: [] };
}

export const VoteExtIndex: MessageFns<VoteExtIndex> = {
  encode(message: VoteExtIndex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.height !== "0") {
      writer.uint32(8).uint64(message.height);
    }
    for (const v of message.indexes) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VoteExtIndex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteExtIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.indexes.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteExtIndex {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      indexes: globalThis.Array.isArray(object?.indexes) ? object.indexes.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: VoteExtIndex): unknown {
    const obj: any = {};
    if (message.height !== "0") {
      obj.height = message.height;
    }
    if (message.indexes?.length) {
      obj.indexes = message.indexes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoteExtIndex>, I>>(base?: I): VoteExtIndex {
    return VoteExtIndex.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoteExtIndex>, I>>(object: I): VoteExtIndex {
    const message = createBaseVoteExtIndex();
    message.height = object.height ?? "0";
    message.indexes = object.indexes?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
