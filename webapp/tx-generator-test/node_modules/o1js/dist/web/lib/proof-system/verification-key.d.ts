export { VerificationKey };
declare const VerificationKey_base: (new (value: {
    data: string;
    hash: import("../provable/field.js").Field;
}) => {
    data: string;
    hash: import("../provable/field.js").Field;
}) & {
    _isStruct: true;
} & import("../provable/provable.js").Provable<{
    data: string;
    hash: import("../provable/field.js").Field;
}, {
    data: string;
    hash: bigint;
}> & {
    fromValue: (value: {
        data: string;
        hash: import("../provable/field.js").Field;
    } | {
        data: string;
        hash: bigint;
    }) => {
        data: string;
        hash: import("../provable/field.js").Field;
    };
    toInput: (x: {
        data: string;
        hash: import("../provable/field.js").Field;
    }) => {
        fields?: import("../provable/field.js").Field[] | undefined;
        packed?: [import("../provable/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        data: string;
        hash: import("../provable/field.js").Field;
    }) => string;
    fromJSON: (x: string) => {
        data: string;
        hash: import("../provable/field.js").Field;
    };
    empty: () => {
        data: string;
        hash: import("../provable/field.js").Field;
    };
};
declare class VerificationKey extends VerificationKey_base {
    static dummy(): Promise<VerificationKey>;
    static dummySync(): VerificationKey;
    static checkValidity(key: VerificationKey): Promise<boolean>;
}
